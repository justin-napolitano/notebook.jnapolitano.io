<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graphDB on Justin&#39;s Data Blog</title>
    <link>https://blog.jnapolitano.io/tags/graphdb/</link>
    <description>Justin&#39;s Data Blog (graphDB)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 May 2022 22:30:32 +0000</lastBuildDate>
    
    <atom:link href="https://blog.jnapolitano.io/tags/graphdb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Conduct Legal Research with AI: Part 4</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-4/</link>
      <pubDate>Thu, 19 May 2022 22:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-4/</guid>
      <description>&lt;h1 id=&#34;conduct-legal-research-with-ai-part-4&#34; &gt;Conduct Legal Research with AI Part 4
&lt;span&gt;
    &lt;a href=&#34;#conduct-legal-research-with-ai-part-4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;This is the fourth post in a series documenting the process of building an ml pipeline used to train models to predict the outcomes of Supreme Court cases.&lt;/p&gt;
&lt;p&gt;You can find the others at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href=&#34;https://blog.jnapolitano.io/neo4j_integration/&#34;&gt;blog.jnapolitano.io/neo4j_integration/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href=&#34;https://blog.jnapolitano.io/constitution_to_neo/&#34;&gt;blog.jnapolitano.io/constitution_to_neo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href=&#34;https://blog.jnapolitano.io/ai-proof-of-concept/&#34;&gt;blog.jnapolitano.io/ai-proof-of-concept/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modeling-the-supreme-court&#34; &gt;Modeling the Supreme Court
&lt;span&gt;
    &lt;a href=&#34;#modeling-the-supreme-court&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Thankfully, much of the ground work has been done by contributors to &lt;a href=&#34;http://scdb.wustl.edu/documentation.php&#34;&gt;The Washington University of St. Louis Law School Supreme Court Database&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, The Supreme Court Database is limited in its scope. My approach extends their work by  creating a graph database.&lt;/p&gt;
&lt;p&gt;I have chosen to model the data in a graph database with a Person, Object, Event, Location (POLE) schema.  This will permit me to relate cases, justices, subjects, objects, ideas, and events to one another to train ML models to automate much of the legal research pipeline.&lt;/p&gt;
&lt;p&gt;The models could be ported to work with any body of jurisprudence.&lt;/p&gt;
&lt;h2 id=&#34;the-case-class&#34; &gt;The Case Class
&lt;span&gt;
    &lt;a href=&#34;#the-case-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In this post, I publish only the Case schema that will be used to relate cases to other objects for a machine learning algorithm to predict the outcomes, subjects, and legal provisions of court cases.&lt;/p&gt;
&lt;p&gt;A detailed report documenting each variable will be produced in the future when I publish the database.  For the time being, the Case class below should suitably demonstrate the foundation of the database.&lt;/p&gt;
&lt;p&gt;I will continue to publish the remaining classes as they are completed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Case&lt;/span&gt;(StructuredNode):
    &lt;span style=&#34;color:#75715e&#34;&gt;#####Media########&lt;/span&gt;
    pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 

    &lt;span style=&#34;color:#75715e&#34;&gt;#### Identification Variables####&lt;/span&gt;
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()

    group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    loc_title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()

    usCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    
    caseId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
   
    caseName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    scdb_docket_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    scdb_vote_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    scdb_issues_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    supCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    lawEdCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    lexisCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    dockNumb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;######background Variables########&lt;/span&gt;
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    petitioner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Petitioner&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_PETITIONER&amp;#39;&lt;/span&gt;)
    petitionState &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_PETITIONER&amp;#39;&lt;/span&gt;)

    respondent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Respondent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_RESPONDENT&amp;#39;&lt;/span&gt;)
    respondentState &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_RESPONDENT&amp;#39;&lt;/span&gt;)

    jurisdiction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jurisdiction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JURISDICTION&amp;#39;&lt;/span&gt;)
    
    adminAction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ACTION&amp;#39;&lt;/span&gt;)

    threeJudgeFdc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty()

    origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USCOURT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ORIGIN&amp;#39;&lt;/span&gt;)

    origin_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ORIGIN&amp;#39;&lt;/span&gt;)

    source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Source&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SOURCE&amp;#39;&lt;/span&gt;)

    source_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SOURCE&amp;#39;&lt;/span&gt;)

    lc_disagreement &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty()

    certReason &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CertReason&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REASON&amp;#39;&lt;/span&gt;)

    lc_disposition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Disposition&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LC_DISPOSITION&amp;#39;&lt;/span&gt;)

    lc_direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LC_DIRECTION&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;#####3 Chronological #####&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# From Spaethe&lt;/span&gt;
    dateArgument &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateProperty()
    dateDecision &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateProperty()
    dateReargue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateProperty()

    &lt;span style=&#34;color:#75715e&#34;&gt;# From LOC&lt;/span&gt;
    date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    term &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Term&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TERM_OF&amp;#39;&lt;/span&gt;)
    natCourt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Natcourt&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NAT_COURT&amp;#39;&lt;/span&gt;)

    chief &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CHIEF&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;######Substantive#####&lt;/span&gt;

    subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    decisionDirection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUP_COURT_MAJORITY_DIRECTION&amp;#39;&lt;/span&gt;)
    
    decisionDirectionDissent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUP_COURT_DISSENT_DIRECTION&amp;#39;&lt;/span&gt;)
    
    spaethIssue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SpaethIssue&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SPAETH_ISSUE&amp;#39;&lt;/span&gt;)
    
    spaethIssueArea &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SpaethIssueArea&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SPAETH_ISSUE_AREA&amp;#39;&lt;/span&gt;)

    subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CASE_OF&amp;#34;&lt;/span&gt;)
    
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_ARTICLE_OF&amp;#39;&lt;/span&gt;)
    
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CLAUSE_OF&amp;#39;&lt;/span&gt;)
    
    section &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Section&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SECTION_OF&amp;#39;&lt;/span&gt;)
    
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SUB_CLAUSE_OF&amp;#39;&lt;/span&gt;)
    
    major_case_topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_MAJOR_TOPIC&amp;#39;&lt;/span&gt;)

    authority &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authority&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_AUTHORITY&amp;#39;&lt;/span&gt;)

    legalProvision &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;legalProvision&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_PROVISION&amp;#39;&lt;/span&gt;)
    
    lawType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lawType&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lawType&amp;#39;&lt;/span&gt;)

    law &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Law&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUPPORTING_LAW&amp;#39;&lt;/span&gt;)

   
    &lt;span style=&#34;color:#75715e&#34;&gt;######Outcome Variables#####&lt;/span&gt;

    decisionType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DecisionType&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_DECISION_TYPE&amp;#39;&lt;/span&gt;)

    declarationUnconstitutional &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Constitutional&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UNCONSTITUTIONAL&amp;#39;&lt;/span&gt;)
    
    delcarationConstitutional &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Constitutional&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CONSTITUTIONAL&amp;#34;&lt;/span&gt;)

    disposition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Disposition&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_DISPOSITION&amp;#39;&lt;/span&gt;)

    winningParty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Party&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_WINNER&amp;#39;&lt;/span&gt;)
    FormalAlterationOfPrecedent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty()
    
    alteredPrecedent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Altered_Precedent&amp;#39;&lt;/span&gt;)
    

    &lt;span style=&#34;color:#75715e&#34;&gt;## Voting and Opinion Variables&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# will account for all types of votes a node for each outcome&lt;/span&gt;
    vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Vote&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OUTCOME&amp;#39;&lt;/span&gt;)
    
    majOpinWriter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WROTE_MAJORITY_OPINION&amp;#39;&lt;/span&gt;)
    
    majOpinWriter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ASSIGNED_MAJORITY_OPINION&amp;#34;&lt;/span&gt;)

    affirmative_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFFIRMATE_VOTE&amp;#34;&lt;/span&gt;)
    
    negative_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NEGATIVE_VOTE&amp;#34;&lt;/span&gt;)

    conservative_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CONSERVATIVE&amp;#39;&lt;/span&gt;)
    liberal_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LIBERAL&amp;#34;&lt;/span&gt;)

    majority_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MAJORITY_VOTE&amp;#39;&lt;/span&gt;)

    miniority_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MINORITY_VOTE&amp;#39;&lt;/span&gt;)

    wrote_an_opinion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WROTE_AN_OPINION&amp;#39;&lt;/span&gt;)

    co_authored_opinion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COAUTHORED_OPINION&amp;#34;&lt;/span&gt;)

    agreed_with_concurrence &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AGREED_WITH_CONCURRENCE&amp;#39;&lt;/span&gt;)

    agreed_with_dissent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AGREED_WITH_CONCURRENCE&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 2</title>
      <link>https://blog.jnapolitano.io/posts/constitution_to_neo/</link>
      <pubDate>Tue, 17 May 2022 18:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/constitution_to_neo/</guid>
      <description>&lt;h1 id=&#34;integrating-the-constitution-to-neo4j&#34; &gt;Integrating the Constitution to Neo4j
&lt;span&gt;
    &lt;a href=&#34;#integrating-the-constitution-to-neo4j&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;I am currenlty building a graph database of Supreme Court cases in neo4j to model the behavior and decison making of the court.&lt;/p&gt;
&lt;p&gt;In this post, I include the classes that I will be using to create individual nodes for the articles, sections, clauses, and subclauses of the Consititution.&lt;/p&gt;
&lt;p&gt;Later, these will be related to cases and subjecst in order to train a tensorflow algorithm to recommend case law by issue area and to predict the outcome of cases.&lt;/p&gt;
&lt;h2 id=&#34;workflow&#34; &gt;Workflow
&lt;span&gt;
    &lt;a href=&#34;#workflow&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The basic workflow requires creating a node and then submitting it to the neo4j db.   My previous posts have documented this process in detail.  Review &lt;a href=&#34;https://blog.jnapolitano.io/neo4j_integration/&#34;&gt;blog.jnapolitano.io/neo4j_integration/&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&#34;neomodel-api-classes&#34; &gt;Neomodel Api Classes
&lt;span&gt;
    &lt;a href=&#34;#neomodel-api-classes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The neomodel classes below generate the nodes to be integrated into the database.&lt;/p&gt;
&lt;h3 id=&#34;article-class&#34; &gt;Article Class
&lt;span&gt;
    &lt;a href=&#34;#article-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ARTICLE_OF&amp;#34;&lt;/span&gt;)
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ARTICLE_OF&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_ARTICLE_OF&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;section-class&#34; &gt;Section Class
&lt;span&gt;
    &lt;a href=&#34;#section-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Section&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SECTION_OF&amp;#34;&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SECTION_OF&amp;#34;&lt;/span&gt;)
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SECTION_OF&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SECTION_OF&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;clause-class&#34; &gt;Clause Class
&lt;span&gt;
    &lt;a href=&#34;#clause-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Clause&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CLAUSE_OF&amp;#34;&lt;/span&gt;)
    sibling_clause&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CLAUSE_OF&amp;#34;&lt;/span&gt;)
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CLAUSE_OF&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CLAUSE_OF&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;subclause-class&#34; &gt;Subclause Class
&lt;span&gt;
    &lt;a href=&#34;#subclause-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Subclause&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&amp;#34;&lt;/span&gt;)
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&amp;#34;&lt;/span&gt;)
    sibling_clause&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#sub_clause = Relationship(&amp;#34;Subclause&amp;#34;, &amp;#34;IS_SUBCLAUSE_OF&amp;#34;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sample-application&#34; &gt;Sample Application
&lt;span&gt;
    &lt;a href=&#34;#sample-application&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The application below creates a dataframe with node objects that will be uploaded to the neo4j database.  In order to accomplish an upload the .save() function must be called on the object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; platform &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; node
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#75715e&#34;&gt;#from neomodel import (config, StructuredNode, StringProperty, IntegerProperty,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship,db)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;#import NeoNodes as nn&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import GoogleServices&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import sparkAPI as spark&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neoModelAPI &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; neo
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shutil



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instantiate_neo_model_api&lt;/span&gt;():
    uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7a92f171.databases.neo4j.io&amp;#34;&lt;/span&gt;
    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;neo4j&amp;#34;&lt;/span&gt;
    psw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RF4Gr2IJTNhHlW6HOrLDqz_I2E2Upyh7o8paTwfnCxg&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate_neo_model_session(uri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;uri,user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user,psw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;psw)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cwd&lt;/span&gt;():
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cwd


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;article_data&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(path)&lt;/span&gt;
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.csv&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_df&lt;/span&gt;(file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a_file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
            df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(a_file )
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;
       

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_transaction_df&lt;/span&gt;(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):  
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(justice_df)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df.columns)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#   df.apply(lambda x: print(x), axis =1)&lt;/span&gt;
        df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_section_node(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;section&amp;#39;&lt;/span&gt;],  
        topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;topic&amp;#39;&lt;/span&gt;], 
        citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;citation&amp;#39;&lt;/span&gt;]),
        axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
    
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_transaction_to_file&lt;/span&gt;(df, cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(),import_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;merge_articles&amp;#39;&lt;/span&gt;, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;article_transaction_df&amp;#39;&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,import_directory,file_name])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(outfile)&lt;/span&gt;
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(outfile)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; outfile
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_closing_message&lt;/span&gt;(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, outfile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_terminal_size((&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;))
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;


    seperator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; columns
    df_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your Final df looks like: &amp;#34;&lt;/span&gt;
    outfile_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You will find the data at: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(outfile)
    pprint(seperator)
    pprint(df_message)
    pprint(df)
    pprint(seperator)
    pprint(outfile_message)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    


    


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;#neo_applified = instantiate_neo_model_api()&lt;/span&gt;
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd, input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sections_data&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(file_list)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#master_subject_table = create_master_subject_table()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#json_pipeline(file_list=file_list, master_subject_table=master_subject_table)&lt;/span&gt;
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_df(file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_list)
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_transaction_df(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df)
    outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; write_transaction_to_file(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df , cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sections_transaction_df.csv&amp;#39;&lt;/span&gt;)
    messaged &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; send_closing_message(df, outfile)


    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(justice_df)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 1</title>
      <link>https://blog.jnapolitano.io/posts/neo4j_integration/</link>
      <pubDate>Mon, 16 May 2022 14:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/neo4j_integration/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In a previous &lt;a href=&#34;https://blog.jnapolitano.io/loc_crawler/&#34;&gt;post&lt;/a&gt;, I detailed the process of crawling the Library of Congress API to generate json files that could be intergrated into you DB of choice.&lt;/p&gt;
&lt;p&gt;In this discussion, we will integrate JSON data into a Neo4j graph database.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34; &gt;Overview
&lt;span&gt;
    &lt;a href=&#34;#overview&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The process is fairly straightforward.  The most difficult part is wrangling your json data into the right format for integration.&lt;/p&gt;
&lt;p&gt;The main function first instantiates the database config informormation.  It then gets the cwd from a context manager.  We then import the files to be integrated.  A master subject table is created to record only unique subjects to avoid duplicates.  Finally, a json pipeline extracts the data from json, transforms it to integrate into neo4j, and finally we upload using the neomodels api.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    neo_applified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instantiate_neo_model_api()
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd)
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_master_subject_table()
    json_pipeline(file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_list, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;instantiate-neo-model-api&#34; &gt;Instantiate Neo Model Api
&lt;span&gt;
    &lt;a href=&#34;#instantiate-neo-model-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I extended the neo model api with a few helper functions.  The repo is found at &lt;a href=&#34;https://github.com/justin-napolitano/neo4jAPI&#34;&gt;https://github.com/justin-napolitano/neo4jAPI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also review the snapshot below.&lt;/p&gt;
&lt;p&gt;We will be calling the initation function to set the config information, update, create Case, and Create Subject classes during this review.&lt;/p&gt;
&lt;p&gt;create subject calls the custom subject class and returns an object that can later be integrated into the db with the .save() function.&lt;/p&gt;
&lt;p&gt;Create case does exactly the same.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; date
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; shelve &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Shelf
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; neomodel &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (config, StructuredNode, StringProperty, IntegerProperty,
    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship, db)
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;neoAPI&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,uri,user,psw):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;db_init &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate_neo_model_session(uri,user,psw)    
        
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instantiate_neo_model_session&lt;/span&gt;(uri,user,psw):
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#config.DATABASE_URL = &amp;#39;neo4j+s://{}:{}@{}&amp;#39;.format(user, psw, uri)&lt;/span&gt;
        config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DATABASE_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bolt://neo4j:beautiful@localhost:7687&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#config.DATABASE_URL = uri&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standard_query&lt;/span&gt;():
        results, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cypher_query(query, params)
        people &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [Person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inflate(row[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; results]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_case_node&lt;/span&gt;(date, dates, group,name, pdf, shelf_id, subject, title, url, subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Case(date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;date, dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dates, group&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;group,name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name, pdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pdf, shelf_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;shelf_id, subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;subject, title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;title, url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;url)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_city_node&lt;/span&gt;(name):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; City(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_country_node&lt;/span&gt;(code,name):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Country(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_state_node&lt;/span&gt;(code,name):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; State(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_realtor_search_url_node&lt;/span&gt;(url):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Realtor_Search_URL(url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url, is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, is_parent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, searched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_root_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Root(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)
        uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_child_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Child(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_parent_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Parent(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_sibling_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Sibling(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_relationship&lt;/span&gt;(source,target):
      
        
        rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; source&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(target)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rel

        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;{}&amp;#34;+&amp;#34;.connect&amp;#34; + &amp;#34;{}&amp;#34;.format(source,target))&lt;/span&gt;
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_subject_node&lt;/span&gt;(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Subject(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(obj):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transaction:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Subject&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Case&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 
    shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#primary_topic = StringProperty(unique_index=True, required=True)&lt;/span&gt;
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SUBJECT&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Processed&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotProcessed&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;City&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_STATE_OF&amp;#39;&lt;/span&gt;)
    country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Country&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_COUNTRY_OF&amp;#39;&lt;/span&gt;)
    
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Country&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Country&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_COUNTRY_OF&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Root&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sibling&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Realtor_com&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_realtor_com &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Realtor_Search_URL&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    searched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#state = Relationship(&amp;#39;State&amp;#39;, &amp;#39;OF&amp;#39;)&lt;/span&gt;
    state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_STATE_OF&amp;#39;&lt;/span&gt;)
    city &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CITY_OF&amp;#39;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Root&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_ROOT&amp;#39;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Child&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Parent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sibling&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    realtor_com &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Realtor_com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_REALTOR.COM_URL&amp;#34;&lt;/span&gt;)
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    full_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EmailProperty()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-files&#34; &gt;Get Files
&lt;span&gt;
    &lt;a href=&#34;#get-files&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The get_files function returns a list of files within the input directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.json&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-master-subject-file&#34; &gt;Create Master Subject File
&lt;span&gt;
    &lt;a href=&#34;#create-master-subject-file&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Create maseter subject table generates an empty dataframe that will record every unique subject experienced in the data.&lt;/p&gt;
&lt;p&gt;I will improve upon this later, by uploading a master file that will be saved following each modification.  This would enable resuming the process following an error or fault.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_master_subject_table&lt;/span&gt;():
    table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(table)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;json-pipeline-function&#34; &gt;Json Pipeline function
&lt;span&gt;
    &lt;a href=&#34;#json-pipeline-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The json pipeline function is the runner for the etl job.  It loads each file into dataframe, manipulates the data accordingly, and updates the neo4j database.&lt;/p&gt;
&lt;p&gt;When I refactor the code, I will most likely create an object that calls static functions to generate then desired output.&lt;/p&gt;
&lt;p&gt;I may also seperate the case, subject, and relationship pipeline into seperate classes in order to avoid shadowing functions within functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json_pipeline&lt;/span&gt;(file_list, master_subject_table):
    case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
        
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_json_data(file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data[0])&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#filtered_data = filter_json_data(json_data = data, filter = filter)&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the case nodes transaction nodes and df&lt;/span&gt;
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clean_json_data(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stringify_json_values(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandify_case_data(case_data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_case_data(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the subject nodes transaction nodes and df&lt;/span&gt;
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice_subject_data(data)
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; identify_unique_subjects(subject_list)
        subject_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_subject_lookup_table(subject_list)
        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integrate_to_master_table(subject_lookup_table,master_subject_table)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;
        case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_counter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(case_data)

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_subjects(master_subject_table)

        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table[&amp;#39;transaction&amp;#39;])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#lets save data to the database&lt;/span&gt;

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_subjects_to_db(master_subject_table)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_cases_to_db(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create Relationships&lt;/span&gt;

        relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_relationship_table(case_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;case_data, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;case-pipeline&#34; &gt;Case Pipeline
&lt;span&gt;
    &lt;a href=&#34;#case-pipeline&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Creating the case nodes transaction nodes and df&lt;/span&gt;
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clean_json_data(data)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stringify_json_values(data)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandify_case_data(case_data)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_case_data(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create the case nodes four functions are called.&lt;/p&gt;
&lt;h4 id=&#34;clean-json-data&#34; &gt;Clean Json Data
&lt;span&gt;
    &lt;a href=&#34;#clean-json-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The first is clean_json_data which is actually unnecessary.  The only operation that is required is moving the pdf froma list to a dicktionary key.  It should and will be refactored.  As it stands now, I am leaving iut as an artifact of a previous workflow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clean_json_data&lt;/span&gt;(filtered_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Select the keys that I want from the dictionary&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# filter appropriatly into a df &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# write df to file&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(type(filtered_data))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(filtered_data)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filtered_data:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#creat a dictionary of columns and values for each row.  Combine them all into a df when we are done&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# each dictionary must be a row.... which makes perfect sense, but they can not be nested... &lt;/span&gt;
        item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        resources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;language&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        online_format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;online_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        original_format &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;original_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        kind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        image_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image_url&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        hassegments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hassegments&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        extract_timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extract_timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        timestampe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        mimetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mime_type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resources[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;: 
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noPdf&amp;#34;&lt;/span&gt;
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdf&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pdf
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;search_index&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;stringify-json-data&#34; &gt;Stringify Json Data
&lt;span&gt;
    &lt;a href=&#34;#stringify-json-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The Second is Stringify_json_data.  The imporatance of this function is that it creates strings from lists in order to properly integrate into the neo4j databse.  Iterables are permitted, however they can not be searched.  For my use case, I decided to create csv strings instead that can later be parsed if necessary.&lt;/p&gt;
&lt;p&gt;This function also moves the subject list to a dedicated key in the dictionary.  This is important because it is used to generate the subject tables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stringify_json_values&lt;/span&gt;(data):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dict &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(dict[key]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; list:
                tmp_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (dict[key]):
                    item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)
                    tmp_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(item)
                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_list

                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(dict[key])
        dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list

                
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;pandify-case-data&#34; &gt;Pandify Case Data
&lt;span&gt;
    &lt;a href=&#34;#pandify-case-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The next function creates a pandas dataframe from a list of dictionaries.  Thankfully this is easy to accommplish.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pandify_case_data&lt;/span&gt;(data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_df = pd.concat(data, sort=False)&lt;/span&gt;
    df&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(data)
    df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;nodify-case-data&#34; &gt;Nodify Case Data
&lt;span&gt;
    &lt;a href=&#34;#nodify-case-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Nodify creates transaction objects that can be saved to the neo4j databse.  I call the neomodel api to generate the results and save them into a dataframe that is used to apply the upload with a lambda function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_case_data&lt;/span&gt;(case_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data.notna()]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    case_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_case_node(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;], dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dates&amp;#39;&lt;/span&gt;],group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;], name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;], pdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;], shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;], subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;], title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;], url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;], subject_relationship&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_nodes
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-subject-pipeline&#34; &gt;The Subject Pipeline
&lt;span&gt;
    &lt;a href=&#34;#the-subject-pipeline&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The subject pipeline slices the subject data from the current search result page.&lt;/p&gt;
&lt;p&gt;It then identifies the unique subjects&lt;/p&gt;
&lt;p&gt;The subject_lookup_table is a dataframe containing the subjects returned by subject list.  They are unique only to the result page.&lt;/p&gt;
&lt;p&gt;The master_subject_table is then updated by the integrate_to_master_table function that identifes new subjects to integrate into the master table.&lt;/p&gt;
&lt;p&gt;finally, the nodify subject function creates transaction objects to be uploaded to the neo4j db.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the subject nodes transaction nodes and df&lt;/span&gt;
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice_subject_data(data)
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; identify_unique_subjects(subject_list)
    subject_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_subject_lookup_table(subject_list)
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integrate_to_master_table(subject_lookup_table,master_subject_table)
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;

    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_subjects(master_subject_table)
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;slice_subject_data&#34; &gt;slice_subject_data
&lt;span&gt;
    &lt;a href=&#34;#slice_subject_data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice_subject_data&lt;/span&gt;(data):
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; case &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; case[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject_list)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; subject_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;identify-unique-subjects&#34; &gt;Identify Unique Subjects
&lt;span&gt;
    &lt;a href=&#34;#identify-unique-subjects&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;identify_unique_subjects&lt;/span&gt;(subject_list):
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# insert the list to the set&lt;/span&gt;
    list_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(subject_list)
    &lt;span style=&#34;color:#75715e&#34;&gt;# convert the set to the list&lt;/span&gt;
    unique_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (list(list_set))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; unique_list

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;create-subject-lookup-table&#34; &gt;Create Subject Lookup Table
&lt;span&gt;
    &lt;a href=&#34;#create-subject-lookup-table&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_subject_lookup_table&lt;/span&gt;(subject_list):
    lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(subject_list, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;])
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lookup_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;nodify-subject&#34; &gt;Nodify Subject
&lt;span&gt;
    &lt;a href=&#34;#nodify-subject&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_subjects&lt;/span&gt;(master_subject_table):
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#df[df.isna().any(axis=1)]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_subject_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
    master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;uploading-case-and-subject-data&#34; &gt;Uploading Case and Subject data
&lt;span&gt;
    &lt;a href=&#34;#uploading-case-and-subject-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;With the transaction object dataframes created, we can then update the data to the database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_subjects_to_db(master_subject_table)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_cases_to_db(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;submit-subjects&#34; &gt;Submit Subjects
&lt;span&gt;
    &lt;a href=&#34;#submit-subjects&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This function selects the subject nodes from the master table that have not been uploaded to the neo4j database.&lt;/p&gt;
&lt;p&gt;It identifies na in the submitted collumn in order to slice non-submitted nodes.&lt;/p&gt;
&lt;p&gt;If that table can be created we upload all of the df with the update function from the neoapi.  It simply calls the db and calls save() on the object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_subjects_to_db&lt;/span&gt;(master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes=master_subject_table[[master_subject_table[&amp;#39;submitted&amp;#39;] == np.nan]]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty:   
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
         &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
        master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;submit-cases&#34; &gt;Submit Cases
&lt;span&gt;
    &lt;a href=&#34;#submit-cases&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Initially i had copy and pasted the subject submission function. I realized that the checks were unnecessary.   I am assuming that each result is unique.  Therefore, every case is uploaded.  If it proves that there are duplicates in the database, the neo4j cypher language would permit me to prune those duplicate edges.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_cases_to_db&lt;/span&gt;(case_data):
        &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;### in theory none of the cases wouldhave been submitted becasue i am pulling them from file.  There is no need to check.. Just submit&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data[&amp;#39;submitted&amp;#39;].isna()].copy()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;##pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#if non_submitted_nodes.empty:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    return case_data&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#else:&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
    &lt;span style=&#34;color:#75715e&#34;&gt;#Assume all are submitted..&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_data.update(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;submit-the-relationships&#34; &gt;Submit the Relationships
&lt;span&gt;
    &lt;a href=&#34;#submit-the-relationships&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The final step is to relate the cases to the subject nodes.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;relationship_list= create_relationship_table(case_data=case_data, master_subject_table=master_subject_table)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is accomplished by calling the relationship function declared in the Case class declared in the neomodel api.&lt;/p&gt;
&lt;p&gt;View the reference below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Case&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 
    shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#primary_topic = StringProperty(unique_index=True, required=True)&lt;/span&gt;
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SUBJECT&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;create-relationship-table&#34; &gt;Create Relationship Table
&lt;span&gt;
    &lt;a href=&#34;#create-relationship-table&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;To create the relationships the case_data and the master_subject_table are necessary.&lt;/p&gt;
&lt;p&gt;for every case a relationship is created to every subject within its subject list.&lt;/p&gt;
&lt;p&gt;It is important to note, that in order for this function to work correctly, the cases and subjects must first be submitted to the database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_relationship_table&lt;/span&gt;(case_data, master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data[])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#test = master_subject_table[&amp;#39;subject&amp;#39;]&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# select &lt;/span&gt;
    relationship_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(case_data)):
        unique_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;][row])])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_dataframe)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; subject_row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(unique_dataframe)):
            case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unique_dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[subject_row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            &lt;span style=&#34;color:#75715e&#34;&gt;#create relationship&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject)&lt;/span&gt;
            relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(case&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subject_relationship,subject)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(relationship)&lt;/span&gt;
            relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(relationship)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; relationship_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;putting-everything-together&#34; &gt;Putting Everything Together
&lt;span&gt;
    &lt;a href=&#34;#putting-everything-together&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#realtor_graph.py&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;#from neo4j_connect_2 import NeoSandboxApp&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import neo4j_connect_2 as neo&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import GoogleServices as google&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#from pyspark.sql import SparkSession&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#from pyspark.sql.functions import struct&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; cgitb &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lookup
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; code
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dbm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dumb
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; doctest &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; master
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hmac &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; trans_36
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mimetypes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; platform &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; node
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pty &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; master_open
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; re &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sub
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; unittest.util &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unorderable_list_difference
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; non_hierarchical
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; neomodel &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (config, StructuredNode, StringProperty, IntegerProperty,
    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship,db)
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;#import NeoNodes as nn&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import GoogleServices&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neo4jClasses
&lt;span style=&#34;color:#75715e&#34;&gt;#import sparkAPI as spark&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neoModelAPI &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; neo
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#75715e&#34;&gt;#from neoModelAPI import NeoNodes as nn&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataUploadFunctions&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload_df&lt;/span&gt;(self,df):
        &lt;span style=&#34;color:#75715e&#34;&gt;#df.apply(lambda x: pprint(str(x) + str(type(x))))&lt;/span&gt;
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(node_list)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  node_list
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_to_df&lt;/span&gt;(self,df1,df2,lookup_value :str, lookup_key: str):
        df1[lookup_value] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df1[lookup_key]
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df1.columns)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df1)&lt;/span&gt;
        
        val  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df1[lookup_value]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(dict(zip(df2[lookup_key],  df2[lookup_value])))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_relationships&lt;/span&gt;(self,source_node, target_node):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(source_node)&lt;/span&gt;
        rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; source_node ,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target_node)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rel

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataPipelineFunctions&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_df_to_csv&lt;/span&gt;(self,df,path: str):
        cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
        path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,path])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(path,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
            df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(path, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; path

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_city_nodes&lt;/span&gt;(self,df):
        city_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_name&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_city_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; city_nodes

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_url_nodes&lt;/span&gt;(self,df):
        url_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_realtor_url&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_realtor_search_url_node(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; url_nodes
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_root_nodes&lt;/span&gt;(self,df):
        root_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_realtor_url&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_root_node(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root_nodes

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_country_nodes&lt;/span&gt;(self,df):
        country_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_country_node(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_name),axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; country_nodes
        

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_unique_country_df&lt;/span&gt;(self,df):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(subset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;difference([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_code&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;]), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_state_nodes&lt;/span&gt;(self,df):
        state_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_state_node(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_name),axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state_nodes    

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_unique_state_df&lt;/span&gt;(self,df):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(subset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;difference([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_code&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_code&amp;#39;&lt;/span&gt;]), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df)&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rename_columns&lt;/span&gt;(self,df, mapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_code&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor_url&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_realtor_url&amp;#39;&lt;/span&gt;}):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename(columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mapper)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_country_code&lt;/span&gt;(self,country_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; country_code

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_country_name&lt;/span&gt;(self,country_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;United States of America&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; country_name

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload_df&lt;/span&gt;(self,df):
        &lt;span style=&#34;color:#75715e&#34;&gt;#df.apply(lambda x: pprint(str(x) + str(type(x))))&lt;/span&gt;
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        pprint(node_list)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  node_list
        &lt;span style=&#34;color:#75715e&#34;&gt;#df[&amp;#39;server_node&amp;#39;] =  node_list&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df)&lt;/span&gt;
        
        


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_url_relationships&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        update_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city_node), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        pprint(update_list)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; update_list
        &lt;span style=&#34;color:#75715e&#34;&gt;#rel = self.df.url.connect(self.df.city)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_city_relationships&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        update_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_node), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        update_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_node), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        pprint(update_list)
        &lt;span style=&#34;color:#75715e&#34;&gt;#rel = self.df.url.connect(self.df.city)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_state_relationships&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique_state_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_node[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique_state_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_node[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        &lt;span style=&#34;color:#75715e&#34;&gt;#update_list = self.unique_state_nodes.apply(lambda x: neo.neoAPI.create_relationship(source = x.state_node.country,target = x.country_node.name), axis=1)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(update_list)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#rel = self.df.url.connect(self.df.city)&lt;/span&gt;




    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by_state&lt;/span&gt;(self):
        grouped &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;state_name&amp;#34;&lt;/span&gt;)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_data_to_pandas_df&lt;/span&gt;(self,file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; file_path &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:

            &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open (file_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; file:
                df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_json(file)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_city_column&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_city_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df.city_nodes)&lt;/span&gt;



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_states_column&lt;/span&gt;(self):

        unique_states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(subset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(state_dict)&lt;/span&gt;

        unique_states[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unique_states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_state_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_name, code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_states)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.df[&amp;#39;state_nodes&amp;#39;] = unique_states[&amp;#39;state_nodes&amp;#39;] where unique_states[state_name] = self.df_stateName&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;state_node&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.df[&amp;#39;state_node&amp;#39;] =&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df[&amp;#39;state_name&amp;#39;].map(unique_states))&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(dict(zip(unique_states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_name,  unique_states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_node)))
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df)&lt;/span&gt;

        
     
        &lt;span style=&#34;color:#75715e&#34;&gt;#mask = dfd[&amp;#39;a&amp;#39;].str.startswith(&amp;#39;o&amp;#39;)&lt;/span&gt;
        
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.df[&amp;#39;state_nodes&amp;#39;] = self.df.apply(lambda x: neo.create_state_node(name = x.state_name, code = x.state) if x not in states_dict else states_dict[x], axis=1)&lt;/span&gt;
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_url_column&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor_url&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_url_node(url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x, searched&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;))


    

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cwd&lt;/span&gt;():
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cwd

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.json&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instantiate_neo_model_api&lt;/span&gt;():
    uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7a92f171.databases.neo4j.io&amp;#34;&lt;/span&gt;
    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;neo4j&amp;#34;&lt;/span&gt;
    psw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RF4Gr2IJTNhHlW6HOrLDqz_I2E2Upyh7o8paTwfnCxg&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate_neo_model_session(uri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;uri,user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user,psw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;psw)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare_data_pipeline&lt;/span&gt;():
    pipeline_functions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataPipelineFunctions()
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_data_to_pandas_df()
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_country_name()
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_code&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_country_code()
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename_columns(master_df)
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_city_nodes(master_df)
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_url_nodes(master_df)
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_root_nodes(master_df)

    
    master_df_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_df_to_csv(master_df,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;master_df.csv&amp;#39;&lt;/span&gt;)

    

    
    state_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_unique_state_df(master_df)
    state_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_state_nodes(state_df)
    state_df_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_df_to_csv(state_df,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_df.csv&amp;#39;&lt;/span&gt;)
    

    country_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_unique_country_df(master_df)
    country_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_country_nodes(country_df)
    country_df_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_df_to_csv(country_df,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country.csv&amp;#39;&lt;/span&gt;)


    



    &lt;span style=&#34;color:#75715e&#34;&gt;#upload nodes&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master_df&amp;#34;&lt;/span&gt; : master_df, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_df&amp;#39;&lt;/span&gt; : state_df, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_df&amp;#39;&lt;/span&gt;: country_df}



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_json_data&lt;/span&gt;(file):
    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open (file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)
  
    &lt;span style=&#34;color:#75715e&#34;&gt;# Reading from file&lt;/span&gt;
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json_pipeline&lt;/span&gt;(file_list, master_subject_table):
    case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
        
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_json_data(file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data[0])&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#filtered_data = filter_json_data(json_data = data, filter = filter)&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the case nodes transaction nodes and df&lt;/span&gt;
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clean_json_data(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stringify_json_values(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandify_case_data(case_data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_case_data(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the subject nodes transaction nodes and df&lt;/span&gt;
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice_subject_data(data)
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; identify_unique_subjects(subject_list)
        subject_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_subject_lookup_table(subject_list)
        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integrate_to_master_table(subject_lookup_table,master_subject_table)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;
        case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_counter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(case_data)

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_subjects(master_subject_table)

        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table[&amp;#39;transaction&amp;#39;])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#lets save data to the database&lt;/span&gt;

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_subjects_to_db(master_subject_table)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_cases_to_db(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create Relationships&lt;/span&gt;

        relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_relationship_table(case_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;case_data, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
    




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_cases_to_db&lt;/span&gt;(case_data):
        &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;### in theory none of the cases wouldhave been submitted becasue i am pulling them from file.  There is no need to check.. Just submit&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data[&amp;#39;submitted&amp;#39;].isna()].copy()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;##pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#if non_submitted_nodes.empty:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    return case_data&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#else:&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
    &lt;span style=&#34;color:#75715e&#34;&gt;#Assume all are submitted..&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_data.update(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data

    &lt;span style=&#34;color:#75715e&#34;&gt;#Relationships must need to be created following saving to the df&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#relationships = create_relationship_table(case_data, master_subject_table)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_subjects_to_db&lt;/span&gt;(master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes=master_subject_table[[master_subject_table[&amp;#39;submitted&amp;#39;] == np.nan]]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty:   
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
         &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
        master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tester&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Dolly&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_relationship_table&lt;/span&gt;(case_data, master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data[])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#test = master_subject_table[&amp;#39;subject&amp;#39;]&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# select &lt;/span&gt;
    relationship_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(case_data)):
        unique_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;][row])])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_dataframe)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; subject_row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(unique_dataframe)):
            case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unique_dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[subject_row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            &lt;span style=&#34;color:#75715e&#34;&gt;#create relationship&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject)&lt;/span&gt;
            relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(case&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subject_relationship,subject)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(relationship)&lt;/span&gt;
            relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(relationship)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; relationship_list




        
    &lt;span style=&#34;color:#75715e&#34;&gt;#create relationship between the case and each uid in the unique_data_frame_transaction_list &lt;/span&gt;
    pprint(unique_dataframe)


    &lt;span style=&#34;color:#75715e&#34;&gt;## Creating the realation table&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Thoughts&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# pass subject and case table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# case_subject list collumn&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# where that list is in the master table&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#return  the subjects &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# make a connection to between each subject and the case in the returned tableuid in the table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# return a transaction list &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# with the list commit a transaction for eachn &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#case_data= filter_case_data(data)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_case_data&lt;/span&gt;(case_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data.notna()]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    case_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_case_node(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;], dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dates&amp;#39;&lt;/span&gt;],group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;], name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;], pdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;], shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;], subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;], title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;], url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;], subject_relationship&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_nodes
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_case_data&lt;/span&gt;(data):
    pprint(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_subjects&lt;/span&gt;(master_subject_table):
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#df[df.isna().any(axis=1)]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_subject_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
    master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrate_to_master_table&lt;/span&gt;(subject_lookup_table, master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#check_if subject in list is in subject of the table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# if so drop it from the temp table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# append what is left to the master table &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject_lookup_table)&lt;/span&gt;
    test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]
    unique_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (subject_lookup_table[&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;subject_lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(test)])
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_dataframe)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#duplicate_list = (master_subject_table[~master_subject_table[&amp;#39;subject&amp;#39;].isin(subject_lookup_table[&amp;#39;subject&amp;#39;])])&lt;/span&gt;
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([master_subject_table,unique_dataframe])
    &lt;span style=&#34;color:#75715e&#34;&gt;#master_subject_table.update(unique_dataframe)&lt;/span&gt;
    master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_subject_lookup_table&lt;/span&gt;(subject_list):
    lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(subject_list, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;])
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lookup_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;identify_unique_subjects&lt;/span&gt;(subject_list):
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# insert the list to the set&lt;/span&gt;
    list_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(subject_list)
    &lt;span style=&#34;color:#75715e&#34;&gt;# convert the set to the list&lt;/span&gt;
    unique_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (list(list_set))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; unique_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice_subject_data&lt;/span&gt;(data):
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; case &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; case[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject_list)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; subject_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pandify_case_data&lt;/span&gt;(data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_df = pd.concat(data, sort=False)&lt;/span&gt;
    df&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(data)
    df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
        
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stringify_json_values&lt;/span&gt;(data):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dict &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(dict[key]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; list:
                tmp_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (dict[key]):
                    item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)
                    tmp_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(item)
                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_list

                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(dict[key])
        dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list

                
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data
                

    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clean_json_data&lt;/span&gt;(filtered_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Select the keys that I want from the dictionary&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# filter appropriatly into a df &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# write df to file&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(type(filtered_data))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(filtered_data)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filtered_data:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#creat a dictionary of columns and values for each row.  Combine them all into a df when we are done&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# each dictionary must be a row.... which makes perfect sense, but they can not be nested... &lt;/span&gt;
        item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        resources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;language&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        online_format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;online_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        original_format &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;original_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        kind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        image_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image_url&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        hassegments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hassegments&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        extract_timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extract_timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        timestampe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        mimetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mime_type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resources[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;: 
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noPdf&amp;#34;&lt;/span&gt;
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdf&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pdf
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;search_index&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index
    


    &lt;span style=&#34;color:#75715e&#34;&gt;# convert to strings maybe move into another function to be called.  Actually will definitely move to a nother function &lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; filtered_data
    &lt;span style=&#34;color:#75715e&#34;&gt;#uid = UniqueIdProperty()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;##date = date&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#dates = dates&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#group = group&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#id = id &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pdf = pdf &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#shelf_id = shelf_id&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#subject = subject&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#primary_topic = primary_topic&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#title = title&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#url = url&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#description = description&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#source_collection = source_collection&lt;/span&gt;




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_json_data&lt;/span&gt;(json_data, filter):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Using dict()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Extracting specific keys from dictionary&lt;/span&gt;

    filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;contributor&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dates&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;digitized&amp;#39;&lt;/span&gt;]
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict((k, json_data[k]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filter &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; json_data)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_master_subject_table&lt;/span&gt;():
    table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(table)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    neo_applified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instantiate_neo_model_api()
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd)
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_master_subject_table()
    json_pipeline(file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_list, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#neo_sandbox_app = instantiate_neo_sandbox_app()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#google_creds = load_google_creds()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#sheets_app = instantiate_sheets_app(google_creds.credentials)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#drive_app = instantiate_drive_app(google_creds.credentials)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#googleAPI = instantiate_google_API()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#sparkAPI = instantiate_spark_API()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#neoAPI = NeoAPI()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#nodified_df = pandas_functions.nodify_dataframe()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#test()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#google_api = googleServices.GoogleAPI()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;###neo_model_api = instantiate_neo_model_api()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;###df_pipeline_dictionary = prepare_data_pipeline()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#final_df_dictionary = upload_data_pipeline_to_neo(df_pipeline_dictionary)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#for k,v in final_df_dictionary.items():&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    cwd = os.getcwd()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    path = str(k) +&amp;#34;Final&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    path = os.sep.join([cwd,path])&lt;/span&gt;

     &lt;span style=&#34;color:#75715e&#34;&gt;#   with open(path, &amp;#34;w&amp;#34;) as file:&lt;/span&gt;
     &lt;span style=&#34;color:#75715e&#34;&gt;#       v.to_csv(path, index=False)&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#prepared_dfs = prepare_pandas_df()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(prepared_df)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#upload_df_to_db(df = prepared_df, neo_model_api = neo_model_api)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 0</title>
      <link>https://blog.jnapolitano.io/posts/loc_crawler/</link>
      <pubDate>Mon, 16 May 2022 13:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/loc_crawler/</guid>
      <description>&lt;h1 id=&#34;crawling-the-library-of-congress-api&#34; &gt;Crawling the Library of Congress API
&lt;span&gt;
    &lt;a href=&#34;#crawling-the-library-of-congress-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The United States Library of Congress maintains a rest api for developers to crawl their collections.  It is an open source tool that anyone can access in order to conduct research. Check out the documenation at &lt;a href=&#34;https://libraryofcongress.github.io/data-exploration/&#34;&gt;https://libraryofcongress.github.io/data-exploration/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-crawler&#34; &gt;Creating a crawler
&lt;span&gt;
    &lt;a href=&#34;#creating-a-crawler&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I took the approach of writing a generator that produces a search result page object that can be operated upon with each iteration.&lt;/p&gt;
&lt;p&gt;The first step is to create a search result page object.&lt;/p&gt;
&lt;p&gt;The code below documents the search_result page.  It contains a number of helper functions to convert the nodes within the result to json or graphml.  The code can also be used to generate a networkx in memory graph.&lt;/p&gt;
&lt;h3 id=&#34;the-search-result-object&#34; &gt;The Search Result Object
&lt;span&gt;
    &lt;a href=&#34;#the-search-result-object&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_results_page&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.loc.gov/collections&amp;#34;&lt;/span&gt;,collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united-states-reports&amp;#34;&lt;/span&gt;,json_parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fo=json&amp;#34;&lt;/span&gt;,results_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=79&amp;#34;&lt;/span&gt;,query_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;,page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp=&amp;#34;&lt;/span&gt;,page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_search_url(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_data()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_to_json()
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.soup_html = self.html_parse()&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_next_url()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_json&lt;/span&gt;(self, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json, outfile)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_pandas&lt;/span&gt;(self):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas_edgelist(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_csv&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.csv&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(output_name)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_graphml&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;, file_num&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.graphml&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_graphml(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph, output_name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_to_file&lt;/span&gt;(self,data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(data, outfile)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_gen_2&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#root = root &lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(k, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((k, {&amp;#39;type&amp;#39; : k}))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#(1, 2, color=&amp;#39;red&amp;#39;, weight=0.84, size=300)\&lt;/span&gt;
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(root,k, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root , k, {&amp;#34;relationship&amp;#34; : &amp;#34;of&amp;#34;}, {&amp;#34;type&amp;#34; : &amp;#39;root&amp;#39;}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(data,type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data)
                &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((data, {&amp;#34;type&amp;#34; : data}))&lt;/span&gt;
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(previous_k, data, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k)
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((previous_k ,data,{&amp;#39;relationship&amp;#39;: &amp;#34;is&amp;#34;}, {&amp;#39;type&amp;#39; : data}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root,data))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph 

    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_runner&lt;/span&gt;(self,data,graph):
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
            &lt;span style=&#34;color:#75715e&#34;&gt;#root = item[&amp;#39;title&amp;#39;]&lt;/span&gt;
            graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(edge_list)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_generator&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title_testing&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(k)
                    edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root , k))
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data)
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((previous_k ,data))
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root,data))

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node_list, edge_list 
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.json_graph = self.create_json_graph()&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_json_graph&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = nx.Graph(self.response_json)&lt;/span&gt;
        graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_dict_of_dicts(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json)
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = json_graph.node_link_graph(self.response_json)&lt;/span&gt;
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw(graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.node_list = self.node_generator`&lt;/span&gt;



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_result_node&lt;/span&gt;(self):
     
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    column_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string()

                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;append_to_data_list&lt;/span&gt;(self,rnge,d):&lt;span style=&#34;color:#75715e&#34;&gt;#rename to _data_list&lt;/span&gt;
        request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;: rnge,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majorDimension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMNS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: [d]
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_body
        &lt;span style=&#34;color:#75715e&#34;&gt;#data_list.append(request_body_tmp)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_column_to_range&lt;/span&gt;(self,column_key):
        
        rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Sheet1&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; column_key &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rnge
                

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colnum_string&lt;/span&gt;(self,num_columns):
        string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#34;conlum_string&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num_columns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            num_columns, remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)
            string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remainder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(string)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_columns_to_lookup_table&lt;/span&gt;(self):

        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;first_map_columns_print&amp;#39;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#num_columns_tmp = self.num_columns&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
                num_columns_tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;second_map_Columns_print&amp;#39;)&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_columns_tmp)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
       
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append range to request... &lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append collumn to batch lookup&lt;/span&gt;
                

                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;column_request_list_generator&lt;/span&gt;(self):
        request_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
            rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_column_to_range(k)
            request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append_to_data_list(rnge,v)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(request_body)&lt;/span&gt;
            request_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(request_body)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_list





        &lt;span style=&#34;color:#75715e&#34;&gt;#return column_lookup_table&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_next_url&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pagination&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;next&amp;#39;&lt;/span&gt;])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_url&lt;/span&gt;(self,base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num):
        url_sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
        page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(str(page_num))
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([json_parameter,results_per_page,page_param])
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; query_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; query
        search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url_sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([base_url,collection,query])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(search_url)&lt;/span&gt;
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_url

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;say_hello&lt;/span&gt;(self):
        pprint(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;base_url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request_data&lt;/span&gt;(self):
        headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.11 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;
                }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url,headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response_to_json&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;html_parse&lt;/span&gt;(self):
        soup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BeautifulSoup(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(soup)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; soup

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flatten_result&lt;/span&gt;(self):
        flat_result_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]:
            flat_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flatten(item)
            flat_result_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(flat_json)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flat_result_list

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-generator&#34; &gt;The Generator
&lt;span&gt;
    &lt;a href=&#34;#the-generator&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The generator yields a search result page if the pagination link included in the response is valid.&lt;/p&gt;
&lt;p&gt;Depending on your use case you could pass the page_num and collection you would like to crawl.&lt;/p&gt;
&lt;p&gt;The api is limited to 80 results per minute.  The sleep function limits calls to the desired rate.  The amount of results returned can be passed to the search result page_object.  Review the code above to see which values can be passed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_result_generator&lt;/span&gt;(condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;#column_lookup_table = {}&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
    page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    column_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;)
        search_results_page_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_search_results_page_object(page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; search_results_page_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
            page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-runner-function&#34; &gt;The Runner Function
&lt;span&gt;
    &lt;a href=&#34;#the-runner-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;To initiate the crawl simply run the algorithm below.  It writes each result page to json.&lt;/p&gt;
&lt;p&gt;As a follow up project, I will post how to integrate the data returned into a neo4j database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; obj &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; search_result_generator():   
        page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; cd(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output_2&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;hahaha&amp;#39;)&lt;/span&gt;
            obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_json(file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_graphml(file_num= page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_pandas()&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_to_file(data = obj.dict_of_dicts, file_num = page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_csv()&lt;/span&gt;
        write_last_page_num(page_num)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Search Results Crawled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(page_num))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;putting-everything-together&#34; &gt;Putting Everything Together
&lt;span&gt;
    &lt;a href=&#34;#putting-everything-together&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The code below is the entire program as it stands.  There is built in functionality to upload the results to a google sheet if that is what you desire using an extension of the google api.   That code can be found at &lt;a href=&#34;https://github.com/justin-napolitano/GoogleAPI&#34;&gt;https://github.com/justin-napolitano/GoogleAPI&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#library_of_congress_scraper.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; __future__ &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; print_function
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bs4 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BeautifulSoup
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lxml.etree &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; etree
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; xml.etree.ElementTree &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ET
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#75715e&#34;&gt;#import load_vars as lv&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; html
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; yaml
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; yaml &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Loader, Dumper
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os.path
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; googleapiclient.discovery &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; build
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google_auth_oauthlib.flow &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; InstalledAppFlow
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.auth.transport.requests &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Request
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.oauth2.credentials &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Credentials
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.oauth2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; service_account
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; googleapiclient.http &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MediaIoBaseDownload, MediaFileUpload
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flatten_json &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; flatten
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; networkx &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; nx
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; networkx.readwrite &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json_graph
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tracemalloc
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#75715e&#34;&gt;#from ratelimiter import RateLimiter&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Context manager for changing the current working directory&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, newPath):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expanduser(newPath)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __enter__(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savedPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
        os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newPath)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __exit__(self, etype, value, traceback):
        os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savedPath)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_results_page&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.loc.gov/collections&amp;#34;&lt;/span&gt;,collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united-states-reports&amp;#34;&lt;/span&gt;,json_parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fo=json&amp;#34;&lt;/span&gt;,results_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=79&amp;#34;&lt;/span&gt;,query_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;,page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp=&amp;#34;&lt;/span&gt;,page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_search_url(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_data()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_to_json()
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.soup_html = self.html_parse()&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_next_url()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_json&lt;/span&gt;(self, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json, outfile)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_pandas&lt;/span&gt;(self):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas_edgelist(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_csv&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.csv&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(output_name)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_graphml&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;, file_num&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.graphml&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_graphml(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph, output_name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_to_file&lt;/span&gt;(self,data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(data, outfile)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_gen_2&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#root = root &lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(k, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((k, {&amp;#39;type&amp;#39; : k}))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#(1, 2, color=&amp;#39;red&amp;#39;, weight=0.84, size=300)\&lt;/span&gt;
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(root,k, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root , k, {&amp;#34;relationship&amp;#34; : &amp;#34;of&amp;#34;}, {&amp;#34;type&amp;#34; : &amp;#39;root&amp;#39;}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(data,type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data)
                &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((data, {&amp;#34;type&amp;#34; : data}))&lt;/span&gt;
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(previous_k, data, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k)
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((previous_k ,data,{&amp;#39;relationship&amp;#39;: &amp;#34;is&amp;#34;}, {&amp;#39;type&amp;#39; : data}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root,data))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph 

    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_runner&lt;/span&gt;(self,data,graph):
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
            &lt;span style=&#34;color:#75715e&#34;&gt;#root = item[&amp;#39;title&amp;#39;]&lt;/span&gt;
            graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(edge_list)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_generator&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title_testing&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(k)
                    edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root , k))
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data)
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((previous_k ,data))
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root,data))

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node_list, edge_list 
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.json_graph = self.create_json_graph()&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_json_graph&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = nx.Graph(self.response_json)&lt;/span&gt;
        graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_dict_of_dicts(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json)
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = json_graph.node_link_graph(self.response_json)&lt;/span&gt;
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw(graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.node_list = self.node_generator`&lt;/span&gt;



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_result_node&lt;/span&gt;(self):
     
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    column_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string()

                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;append_to_data_list&lt;/span&gt;(self,rnge,d):&lt;span style=&#34;color:#75715e&#34;&gt;#rename to _data_list&lt;/span&gt;
        request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;: rnge,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majorDimension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMNS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: [d]
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_body
        &lt;span style=&#34;color:#75715e&#34;&gt;#data_list.append(request_body_tmp)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_column_to_range&lt;/span&gt;(self,column_key):
        
        rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Sheet1&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; column_key &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rnge
                

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colnum_string&lt;/span&gt;(self,num_columns):
        string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#34;conlum_string&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num_columns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            num_columns, remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)
            string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remainder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(string)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_columns_to_lookup_table&lt;/span&gt;(self):

        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;first_map_columns_print&amp;#39;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#num_columns_tmp = self.num_columns&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
                num_columns_tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;second_map_Columns_print&amp;#39;)&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_columns_tmp)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
       
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append range to request... &lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append collumn to batch lookup&lt;/span&gt;
                

                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;column_request_list_generator&lt;/span&gt;(self):
        request_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
            rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_column_to_range(k)
            request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append_to_data_list(rnge,v)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(request_body)&lt;/span&gt;
            request_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(request_body)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_list





        &lt;span style=&#34;color:#75715e&#34;&gt;#return column_lookup_table&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_next_url&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pagination&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;next&amp;#39;&lt;/span&gt;])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_url&lt;/span&gt;(self,base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num):
        url_sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
        page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(str(page_num))
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([json_parameter,results_per_page,page_param])
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; query_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; query
        search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url_sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([base_url,collection,query])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(search_url)&lt;/span&gt;
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_url

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;say_hello&lt;/span&gt;(self):
        pprint(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;base_url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request_data&lt;/span&gt;(self):
        headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.11 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;
                }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url,headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response_to_json&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;html_parse&lt;/span&gt;(self):
        soup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BeautifulSoup(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(soup)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; soup

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flatten_result&lt;/span&gt;(self):
        flat_result_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]:
            flat_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flatten(item)
            flat_result_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(flat_json)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flat_result_list



&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_result&lt;/span&gt;():
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,dict_item,num_columns,colnum_string):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict_item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict_item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; colnum_string
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_columns
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;range &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_column_range_string()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_column_request()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_column_request&lt;/span&gt;(self):
        request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;: self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;range,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majorDimension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMNS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: [self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value]
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_body

    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_column_range_string&lt;/span&gt;(self):

        rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Sheet1&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_string &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rnge
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colnum_string&lt;/span&gt;(self, num_columns):
        string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num_columns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            num_columns, remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)
            string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remainder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google_drive&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,creds):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_drive_service(creds)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(self):
        pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello I exist&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_drive_service&lt;/span&gt;(self, creds):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Shows basic usage of the Drive v3 API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Prints the names and ids of the first 10 files the user has access to.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        SCOPES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#75715e&#34;&gt;#creds = None&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# The file token.json stores the user&amp;#39;s access and refresh tokens, and is&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# created automatically when the authorization flow completes for the first&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# time.&lt;/span&gt;

        service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drive&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v3&amp;#39;&lt;/span&gt;, credentials&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;creds)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Call the Drive v3 API&lt;/span&gt;
        results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;files()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list(
            pageSize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, fields&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nextPageToken, files(id, name)&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        items &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;files&amp;#39;&lt;/span&gt;, [])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; items:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No files found.&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Files:&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; items:
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{1}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;], item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; service
    
    

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_folder&lt;/span&gt;(self,title):
        drive_service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service
        file_metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(title),
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mimeType&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/vnd.google-apps.folder&amp;#39;&lt;/span&gt;
        }
        file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drive_service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;files()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_metadata,
                                            fields&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Folder ID: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;))



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_spreadsheet_to_folder&lt;/span&gt;(self ,folder_id,title):
        drive_service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service
    
        file_metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(title),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parents&amp;#39;&lt;/span&gt;: [folder_id],
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mimeType&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/vnd.google-apps.spreadsheet&amp;#39;&lt;/span&gt;,
        }

        res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drive_service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;files()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_metadata)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(res)&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google_sheet&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,creds):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_sheet_service(creds)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_sheet_service&lt;/span&gt;(self,creds):
        service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sheets&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v4&amp;#39;&lt;/span&gt;, credentials&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;creds)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spreadsheets()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google_creds&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,creds_path):

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_creds(creds_path)
   
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_creds&lt;/span&gt;(self,creds_path):

        creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# The file token.json stores the user&amp;#39;s access and refresh tokens, and is&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# created automatically when the authorization flow completes for the first&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# time.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token.json&amp;#39;&lt;/span&gt;):
            creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Credentials&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_authorized_user_file(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token.json&amp;#39;&lt;/span&gt;, SCOPES)
        &lt;span style=&#34;color:#75715e&#34;&gt;# If there are no (valid) credentials available, let the user log in.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; creds &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; creds &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expired &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh_token:
                creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh(Request())
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no creds&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service_account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Credentials&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_service_account_file(creds_path)
                &lt;span style=&#34;color:#75715e&#34;&gt;#creds = ServiceAccountCredentials.from_json_keyfile_name(&amp;#39;add_json_file_here.json&amp;#39;, SCOPES)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#flow = InstalledAppFlow.from_client_secrets_file(&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#    &amp;#39;credentials.json&amp;#39;, SCOPES)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#creds = flow.run_local_server(port=0)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# Save the credentials for the next run&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#with open(&amp;#39;token.json&amp;#39;, &amp;#39;w&amp;#39;) as token:&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#    token.write(creds.to_json())&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; creds

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,file_path):
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.yaml_stream = file(&amp;#34;config.yaml&amp;#34;, &amp;#39;r&amp;#39;)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_config(file_path)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_config&lt;/span&gt;(self,file_path):
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;test&amp;#34;)&lt;/span&gt;
        stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(file_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yaml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(stream,Loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Loader)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_google_credentials_object&lt;/span&gt;(creds_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;credentials.json&amp;#39;&lt;/span&gt;):
    google_credentials_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_creds(creds_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; google_credentials_object
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_config_object&lt;/span&gt;(file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config.yaml&amp;#39;&lt;/span&gt;):
    config_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; config(file_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; config_object


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_result_generator&lt;/span&gt;(condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;#column_lookup_table = {}&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
    page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    column_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;)
        search_results_page_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_search_results_page_object(page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; search_results_page_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
            page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
        
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_results_page_object&lt;/span&gt;(base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.loc.gov/collections&amp;#34;&lt;/span&gt;,collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united-states-reports&amp;#34;&lt;/span&gt;,json_parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fo=json&amp;#34;&lt;/span&gt;,results_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=70&amp;#34;&lt;/span&gt;,query_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;,page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp=&amp;#34;&lt;/span&gt;,page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;#search = search_results(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(search.search_url)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_results_page(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_google_drive_object&lt;/span&gt;(google_creds):
    drive_service_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_drive(google_creds)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; drive_service_object

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_google_sheet_object&lt;/span&gt;(google_creds):
    sheet_service_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_sheet(google_creds)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sheet_service_object

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_new_google_sheet&lt;/span&gt;(google_drive_object,folder_id,title):
    sheet_meta_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_drive_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_spreadsheet_to_folder(folder_id, title)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sheet_meta_data

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flatten_result&lt;/span&gt;(result_json):
    flat_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flatten(result_json)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flat_json

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_last_page_num&lt;/span&gt;(page_num):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last_page_num.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
        f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(str(page_num))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
    tracemalloc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
    &lt;span style=&#34;color:#75715e&#34;&gt;#rate_limiter = RateLimiter(max_calls=1, period=60)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#cd to output&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#result = create_search_results_page_object()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#with cd(&amp;#34;output&amp;#34;):&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    result.write_to_file(data = result.dict_of_dicts, file_num = 1)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; obj &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; search_result_generator():   
        page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; cd(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output_2&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;hahaha&amp;#39;)&lt;/span&gt;
            obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_json(file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_graphml(file_num= page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_pandas()&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_to_file(data = obj.dict_of_dicts, file_num = page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_csv()&lt;/span&gt;
        write_last_page_num(page_num)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Search Results Crawled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(page_num))


    
    snapshot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tracemalloc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;take_snapshot()
    top_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; snapshot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;statistics(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lineno&amp;#39;&lt;/span&gt;)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ Top 10 ]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; stat &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; top_stats[:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]:
        print(stat)


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    main()

        
        

    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
