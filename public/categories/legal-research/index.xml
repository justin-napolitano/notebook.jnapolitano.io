<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Legal Research on Justin&#39;s Data Blog</title>
    <link>https://blog.jnapolitano.io/categories/legal-research/</link>
    <description>Justin&#39;s Data Blog (Legal Research)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 May 2022 22:30:32 +0000</lastBuildDate>
    
    <atom:link href="https://blog.jnapolitano.io/categories/legal-research/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Conduct Legal Research with AI: Part 4</title>
      <link>https://blog.jnapolitano.io/posts/legal-research-part-4/</link>
      <pubDate>Thu, 19 May 2022 22:30:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/legal-research-part-4/</guid>
      <description>&lt;h1 id=&#34;conduct-legal-research-with-ai-part-4&#34; &gt;Conduct Legal Research with AI Part 4
&lt;span&gt;
    &lt;a href=&#34;#conduct-legal-research-with-ai-part-4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;This is the fourth post in a series documenting the process of building an ml pipeline used to train models to predict the outcomes of Supreme Court cases.&lt;/p&gt;
&lt;p&gt;You can find the others at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href=&#34;https://blog.jnapolitano.io/neo4j_integration/&#34;&gt;blog.jnapolitano.io/neo4j_integration/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href=&#34;https://blog.jnapolitano.io/constitution_to_neo/&#34;&gt;blog.jnapolitano.io/constitution_to_neo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href=&#34;https://blog.jnapolitano.io/ai-proof-of-concept/&#34;&gt;blog.jnapolitano.io/ai-proof-of-concept/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modeling-the-supreme-court&#34; &gt;Modeling the Supreme Court
&lt;span&gt;
    &lt;a href=&#34;#modeling-the-supreme-court&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Thankfully, much of the ground work has been done by contributors to &lt;a href=&#34;http://scdb.wustl.edu/documentation.php&#34;&gt;The Washington University of St. Louis Law School Supreme Court Database&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, The Supreme Court Database is limited in its scope. My approach extends their work by  creating a graph database.&lt;/p&gt;
&lt;p&gt;I have chosen to model the data in a graph database with a Person, Object, Event, Location (POLE) schema.  This will permit me to relate cases, justices, subjects, objects, ideas, and events to one another to train ML models to automate much of the legal research pipeline.&lt;/p&gt;
&lt;p&gt;The models could be ported to work with any body of jurisprudence.&lt;/p&gt;
&lt;h2 id=&#34;the-case-class&#34; &gt;The Case Class
&lt;span&gt;
    &lt;a href=&#34;#the-case-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In this post, I publish only the Case schema that will be used to relate cases to other objects for a machine learning algorithm to predict the outcomes, subjects, and legal provisions of court cases.&lt;/p&gt;
&lt;p&gt;A detailed report documenting each variable will be produced in the future when I publish the database.  For the time being, the Case class below should suitably demonstrate the foundation of the database.&lt;/p&gt;
&lt;p&gt;I will continue to publish the remaining classes as they are completed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Case&lt;/span&gt;(StructuredNode):
    &lt;span style=&#34;color:#75715e&#34;&gt;#####Media########&lt;/span&gt;
    pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 

    &lt;span style=&#34;color:#75715e&#34;&gt;#### Identification Variables####&lt;/span&gt;
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()

    group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    loc_title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()

    usCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    
    caseId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
   
    caseName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    scdb_docket_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    scdb_vote_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    scdb_issues_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    supCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    lawEdCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    lexisCite &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    dockNumb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;######background Variables########&lt;/span&gt;
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    petitioner &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Petitioner&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_PETITIONER&amp;#39;&lt;/span&gt;)
    petitionState &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_PETITIONER&amp;#39;&lt;/span&gt;)

    respondent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Respondent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_RESPONDENT&amp;#39;&lt;/span&gt;)
    respondentState &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_RESPONDENT&amp;#39;&lt;/span&gt;)

    jurisdiction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jurisdiction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JURISDICTION&amp;#39;&lt;/span&gt;)
    
    adminAction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Admin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ACTION&amp;#39;&lt;/span&gt;)

    threeJudgeFdc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty()

    origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USCOURT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ORIGIN&amp;#39;&lt;/span&gt;)

    origin_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ORIGIN&amp;#39;&lt;/span&gt;)

    source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Source&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SOURCE&amp;#39;&lt;/span&gt;)

    source_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SOURCE&amp;#39;&lt;/span&gt;)

    lc_disagreement &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty()

    certReason &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CertReason&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REASON&amp;#39;&lt;/span&gt;)

    lc_disposition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Disposition&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LC_DISPOSITION&amp;#39;&lt;/span&gt;)

    lc_direction &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LC_DIRECTION&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;#####3 Chronological #####&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# From Spaethe&lt;/span&gt;
    dateArgument &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateProperty()
    dateDecision &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateProperty()
    dateReargue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DateProperty()

    &lt;span style=&#34;color:#75715e&#34;&gt;# From LOC&lt;/span&gt;
    date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    
    term &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Term&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TERM_OF&amp;#39;&lt;/span&gt;)
    natCourt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Natcourt&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NAT_COURT&amp;#39;&lt;/span&gt;)

    chief &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CHIEF&amp;#39;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;######Substantive#####&lt;/span&gt;

    subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

    decisionDirection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUP_COURT_MAJORITY_DIRECTION&amp;#39;&lt;/span&gt;)
    
    decisionDirectionDissent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Direction&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUP_COURT_DISSENT_DIRECTION&amp;#39;&lt;/span&gt;)
    
    spaethIssue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SpaethIssue&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SPAETH_ISSUE&amp;#39;&lt;/span&gt;)
    
    spaethIssueArea &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SpaethIssueArea&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SPAETH_ISSUE_AREA&amp;#39;&lt;/span&gt;)

    subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CASE_OF&amp;#34;&lt;/span&gt;)
    
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_ARTICLE_OF&amp;#39;&lt;/span&gt;)
    
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CLAUSE_OF&amp;#39;&lt;/span&gt;)
    
    section &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Section&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SECTION_OF&amp;#39;&lt;/span&gt;)
    
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SUB_CLAUSE_OF&amp;#39;&lt;/span&gt;)
    
    major_case_topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_MAJOR_TOPIC&amp;#39;&lt;/span&gt;)

    authority &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authority&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_AUTHORITY&amp;#39;&lt;/span&gt;)

    legalProvision &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;legalProvision&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_PROVISION&amp;#39;&lt;/span&gt;)
    
    lawType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lawType&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lawType&amp;#39;&lt;/span&gt;)

    law &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Law&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SUPPORTING_LAW&amp;#39;&lt;/span&gt;)

   
    &lt;span style=&#34;color:#75715e&#34;&gt;######Outcome Variables#####&lt;/span&gt;

    decisionType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DecisionType&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_DECISION_TYPE&amp;#39;&lt;/span&gt;)

    declarationUnconstitutional &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Constitutional&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UNCONSTITUTIONAL&amp;#39;&lt;/span&gt;)
    
    delcarationConstitutional &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Constitutional&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CONSTITUTIONAL&amp;#34;&lt;/span&gt;)

    disposition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Disposition&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_DISPOSITION&amp;#39;&lt;/span&gt;)

    winningParty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Party&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_WINNER&amp;#39;&lt;/span&gt;)
    FormalAlterationOfPrecedent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty()
    
    alteredPrecedent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Altered_Precedent&amp;#39;&lt;/span&gt;)
    

    &lt;span style=&#34;color:#75715e&#34;&gt;## Voting and Opinion Variables&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# will account for all types of votes a node for each outcome&lt;/span&gt;
    vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Vote&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;OUTCOME&amp;#39;&lt;/span&gt;)
    
    majOpinWriter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WROTE_MAJORITY_OPINION&amp;#39;&lt;/span&gt;)
    
    majOpinWriter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ASSIGNED_MAJORITY_OPINION&amp;#34;&lt;/span&gt;)

    affirmative_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AFFIRMATE_VOTE&amp;#34;&lt;/span&gt;)
    
    negative_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NEGATIVE_VOTE&amp;#34;&lt;/span&gt;)

    conservative_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CONSERVATIVE&amp;#39;&lt;/span&gt;)
    liberal_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LIBERAL&amp;#34;&lt;/span&gt;)

    majority_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MAJORITY_VOTE&amp;#39;&lt;/span&gt;)

    miniority_vote &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MINORITY_VOTE&amp;#39;&lt;/span&gt;)

    wrote_an_opinion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WROTE_AN_OPINION&amp;#39;&lt;/span&gt;)

    co_authored_opinion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COAUTHORED_OPINION&amp;#34;&lt;/span&gt;)

    agreed_with_concurrence &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AGREED_WITH_CONCURRENCE&amp;#39;&lt;/span&gt;)

    agreed_with_dissent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Justice&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AGREED_WITH_CONCURRENCE&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 2</title>
      <link>https://blog.jnapolitano.io/posts/constitution_to_neo/</link>
      <pubDate>Tue, 17 May 2022 18:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/constitution_to_neo/</guid>
      <description>&lt;h1 id=&#34;integrating-the-constitution-to-neo4j&#34; &gt;Integrating the Constitution to Neo4j
&lt;span&gt;
    &lt;a href=&#34;#integrating-the-constitution-to-neo4j&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;I am currenlty building a graph database of Supreme Court cases in neo4j to model the behavior and decison making of the court.&lt;/p&gt;
&lt;p&gt;In this post, I include the classes that I will be using to create individual nodes for the articles, sections, clauses, and subclauses of the Consititution.&lt;/p&gt;
&lt;p&gt;Later, these will be related to cases and subjecst in order to train a tensorflow algorithm to recommend case law by issue area and to predict the outcome of cases.&lt;/p&gt;
&lt;h2 id=&#34;workflow&#34; &gt;Workflow
&lt;span&gt;
    &lt;a href=&#34;#workflow&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The basic workflow requires creating a node and then submitting it to the neo4j db.   My previous posts have documented this process in detail.  Review &lt;a href=&#34;https://blog.jnapolitano.io/neo4j_integration/&#34;&gt;blog.jnapolitano.io/neo4j_integration/&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&#34;neomodel-api-classes&#34; &gt;Neomodel Api Classes
&lt;span&gt;
    &lt;a href=&#34;#neomodel-api-classes&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The neomodel classes below generate the nodes to be integrated into the database.&lt;/p&gt;
&lt;h3 id=&#34;article-class&#34; &gt;Article Class
&lt;span&gt;
    &lt;a href=&#34;#article-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Article&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ARTICLE_OF&amp;#34;&lt;/span&gt;)
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ARTICLE_OF&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_ARTICLE_OF&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;section-class&#34; &gt;Section Class
&lt;span&gt;
    &lt;a href=&#34;#section-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Section&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SECTION_OF&amp;#34;&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SECTION_OF&amp;#34;&lt;/span&gt;)
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SECTION_OF&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SECTION_OF&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;clause-class&#34; &gt;Clause Class
&lt;span&gt;
    &lt;a href=&#34;#clause-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Clause&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CLAUSE_OF&amp;#34;&lt;/span&gt;)
    sibling_clause&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CLAUSE_OF&amp;#34;&lt;/span&gt;)
    sub_clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subclause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CLAUSE_OF&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CLAUSE_OF&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;subclause-class&#34; &gt;Subclause Class
&lt;span&gt;
    &lt;a href=&#34;#subclause-class&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Subclause&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    article &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&amp;#34;&lt;/span&gt;)
    clause &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Article&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&amp;#34;&lt;/span&gt;)
    sibling_clause&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Clause&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&amp;#34;&lt;/span&gt;)
    case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Case&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_SUBCLAUSE_OF&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#sub_clause = Relationship(&amp;#34;Subclause&amp;#34;, &amp;#34;IS_SUBCLAUSE_OF&amp;#34;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sample-application&#34; &gt;Sample Application
&lt;span&gt;
    &lt;a href=&#34;#sample-application&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The application below creates a dataframe with node objects that will be uploaded to the neo4j database.  In order to accomplish an upload the .save() function must be called on the object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; platform &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; node
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#75715e&#34;&gt;#from neomodel import (config, StructuredNode, StringProperty, IntegerProperty,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship,db)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;#import NeoNodes as nn&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import GoogleServices&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import sparkAPI as spark&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neoModelAPI &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; neo
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shutil



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instantiate_neo_model_api&lt;/span&gt;():
    uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7a92f171.databases.neo4j.io&amp;#34;&lt;/span&gt;
    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;neo4j&amp;#34;&lt;/span&gt;
    psw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RF4Gr2IJTNhHlW6HOrLDqz_I2E2Upyh7o8paTwfnCxg&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate_neo_model_session(uri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;uri,user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user,psw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;psw)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cwd&lt;/span&gt;():
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cwd


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;article_data&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(path)&lt;/span&gt;
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.csv&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_df&lt;/span&gt;(file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a_file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
            df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_csv(a_file )
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;
       

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_transaction_df&lt;/span&gt;(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):  
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(justice_df)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df.columns)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#   df.apply(lambda x: print(x), axis =1)&lt;/span&gt;
        df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_section_node(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;section&amp;#39;&lt;/span&gt;],  
        topic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;topic&amp;#39;&lt;/span&gt;], 
        citation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;citation&amp;#39;&lt;/span&gt;]),
        axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
    
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_transaction_to_file&lt;/span&gt;(df, cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(),import_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;merge_articles&amp;#39;&lt;/span&gt;, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;article_transaction_df&amp;#39;&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,import_directory,file_name])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(outfile)&lt;/span&gt;
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(outfile)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; outfile
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_closing_message&lt;/span&gt;(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, outfile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shutil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_terminal_size((&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;))
    columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;


    seperator &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; columns
    df_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your Final df looks like: &amp;#34;&lt;/span&gt;
    outfile_message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You will find the data at: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(outfile)
    pprint(seperator)
    pprint(df_message)
    pprint(df)
    pprint(seperator)
    pprint(outfile_message)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    


    


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;#neo_applified = instantiate_neo_model_api()&lt;/span&gt;
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd, input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sections_data&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(file_list)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#master_subject_table = create_master_subject_table()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#json_pipeline(file_list=file_list, master_subject_table=master_subject_table)&lt;/span&gt;
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_df(file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_list)
    df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_transaction_df(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df)
    outfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; write_transaction_to_file(df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df , cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sections_transaction_df.csv&amp;#39;&lt;/span&gt;)
    messaged &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; send_closing_message(df, outfile)


    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(justice_df)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 1</title>
      <link>https://blog.jnapolitano.io/posts/neo4j_integration/</link>
      <pubDate>Mon, 16 May 2022 14:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/neo4j_integration/</guid>
      <description>&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In a previous &lt;a href=&#34;https://blog.jnapolitano.io/loc_crawler/&#34;&gt;post&lt;/a&gt;, I detailed the process of crawling the Library of Congress API to generate json files that could be intergrated into you DB of choice.&lt;/p&gt;
&lt;p&gt;In this discussion, we will integrate JSON data into a Neo4j graph database.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34; &gt;Overview
&lt;span&gt;
    &lt;a href=&#34;#overview&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The process is fairly straightforward.  The most difficult part is wrangling your json data into the right format for integration.&lt;/p&gt;
&lt;p&gt;The main function first instantiates the database config informormation.  It then gets the cwd from a context manager.  We then import the files to be integrated.  A master subject table is created to record only unique subjects to avoid duplicates.  Finally, a json pipeline extracts the data from json, transforms it to integrate into neo4j, and finally we upload using the neomodels api.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    neo_applified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instantiate_neo_model_api()
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd)
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_master_subject_table()
    json_pipeline(file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_list, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;instantiate-neo-model-api&#34; &gt;Instantiate Neo Model Api
&lt;span&gt;
    &lt;a href=&#34;#instantiate-neo-model-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I extended the neo model api with a few helper functions.  The repo is found at &lt;a href=&#34;https://github.com/justin-napolitano/neo4jAPI&#34;&gt;https://github.com/justin-napolitano/neo4jAPI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also review the snapshot below.&lt;/p&gt;
&lt;p&gt;We will be calling the initation function to set the config information, update, create Case, and Create Subject classes during this review.&lt;/p&gt;
&lt;p&gt;create subject calls the custom subject class and returns an object that can later be integrated into the db with the .save() function.&lt;/p&gt;
&lt;p&gt;Create case does exactly the same.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; date
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; shelve &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Shelf
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; neomodel &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (config, StructuredNode, StringProperty, IntegerProperty,
    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship, db)
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;neoAPI&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,uri,user,psw):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;db_init &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate_neo_model_session(uri,user,psw)    
        
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instantiate_neo_model_session&lt;/span&gt;(uri,user,psw):
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#config.DATABASE_URL = &amp;#39;neo4j+s://{}:{}@{}&amp;#39;.format(user, psw, uri)&lt;/span&gt;
        config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DATABASE_URL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bolt://neo4j:beautiful@localhost:7687&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#config.DATABASE_URL = uri&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;standard_query&lt;/span&gt;():
        results, meta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cypher_query(query, params)
        people &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [Person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inflate(row[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; results]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_case_node&lt;/span&gt;(date, dates, group,name, pdf, shelf_id, subject, title, url, subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Case(date&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;date, dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dates, group&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;group,name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;name, pdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;pdf, shelf_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;shelf_id, subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;subject, title&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;title, url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;url)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_city_node&lt;/span&gt;(name):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; City(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_country_node&lt;/span&gt;(code,name):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Country(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_state_node&lt;/span&gt;(code,name):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; State(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_realtor_search_url_node&lt;/span&gt;(url):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Realtor_Search_URL(url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url, is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, is_parent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, searched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_root_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Root(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)
        uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_child_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Child(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_parent_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Parent(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_sibling_node&lt;/span&gt;(url, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor.com&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Sibling(is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name,is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_relationship&lt;/span&gt;(source,target):
      
        
        rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; source&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(target)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rel

        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;{}&amp;#34;+&amp;#34;.connect&amp;#34; + &amp;#34;{}&amp;#34;.format(source,target))&lt;/span&gt;
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_subject_node&lt;/span&gt;(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Subject(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;(obj):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; db&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transaction:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Subject&lt;/span&gt;(StructuredNode):
    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Case&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 
    shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#primary_topic = StringProperty(unique_index=True, required=True)&lt;/span&gt;
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SUBJECT&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Processed&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotProcessed&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;City&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_STATE_OF&amp;#39;&lt;/span&gt;)
    country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Country&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_COUNTRY_OF&amp;#39;&lt;/span&gt;)
    
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Country&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Country&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_COUNTRY_OF&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Root&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Sibling&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sibling&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Child&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Root&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_ROOT&amp;#34;&lt;/span&gt;)
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Realtor_com&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    is_realtor_com &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Realtor_Search_URL&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    searched &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    is_sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BooleanProperty(unique_index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#state = Relationship(&amp;#39;State&amp;#39;, &amp;#39;OF&amp;#39;)&lt;/span&gt;
    state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;State&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_STATE_OF&amp;#39;&lt;/span&gt;)
    city &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;City&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_CITY_OF&amp;#39;&lt;/span&gt;)
    root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Root&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IS_ROOT&amp;#39;&lt;/span&gt;)
    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Child&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_CHILD&amp;#34;&lt;/span&gt;)
    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Parent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PARENT&amp;#34;&lt;/span&gt;)
    sibling &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sibling&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SIBLING&amp;#34;&lt;/span&gt;)
    realtor_com &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Realtor_com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_REALTOR.COM_URL&amp;#34;&lt;/span&gt;)
    processed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Processed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_PROCESSED&amp;#34;&lt;/span&gt;)
    NotProcessed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotProcessed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NOT_PROCESSED&amp;#34;&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    full_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(required &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EmailProperty()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-files&#34; &gt;Get Files
&lt;span&gt;
    &lt;a href=&#34;#get-files&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The get_files function returns a list of files within the input directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.json&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-master-subject-file&#34; &gt;Create Master Subject File
&lt;span&gt;
    &lt;a href=&#34;#create-master-subject-file&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Create maseter subject table generates an empty dataframe that will record every unique subject experienced in the data.&lt;/p&gt;
&lt;p&gt;I will improve upon this later, by uploading a master file that will be saved following each modification.  This would enable resuming the process following an error or fault.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_master_subject_table&lt;/span&gt;():
    table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(table)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;json-pipeline-function&#34; &gt;Json Pipeline function
&lt;span&gt;
    &lt;a href=&#34;#json-pipeline-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The json pipeline function is the runner for the etl job.  It loads each file into dataframe, manipulates the data accordingly, and updates the neo4j database.&lt;/p&gt;
&lt;p&gt;When I refactor the code, I will most likely create an object that calls static functions to generate then desired output.&lt;/p&gt;
&lt;p&gt;I may also seperate the case, subject, and relationship pipeline into seperate classes in order to avoid shadowing functions within functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json_pipeline&lt;/span&gt;(file_list, master_subject_table):
    case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
        
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_json_data(file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data[0])&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#filtered_data = filter_json_data(json_data = data, filter = filter)&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the case nodes transaction nodes and df&lt;/span&gt;
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clean_json_data(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stringify_json_values(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandify_case_data(case_data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_case_data(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the subject nodes transaction nodes and df&lt;/span&gt;
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice_subject_data(data)
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; identify_unique_subjects(subject_list)
        subject_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_subject_lookup_table(subject_list)
        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integrate_to_master_table(subject_lookup_table,master_subject_table)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;
        case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_counter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(case_data)

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_subjects(master_subject_table)

        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table[&amp;#39;transaction&amp;#39;])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#lets save data to the database&lt;/span&gt;

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_subjects_to_db(master_subject_table)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_cases_to_db(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create Relationships&lt;/span&gt;

        relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_relationship_table(case_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;case_data, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;case-pipeline&#34; &gt;Case Pipeline
&lt;span&gt;
    &lt;a href=&#34;#case-pipeline&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Creating the case nodes transaction nodes and df&lt;/span&gt;
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clean_json_data(data)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stringify_json_values(data)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandify_case_data(case_data)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_case_data(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create the case nodes four functions are called.&lt;/p&gt;
&lt;h4 id=&#34;clean-json-data&#34; &gt;Clean Json Data
&lt;span&gt;
    &lt;a href=&#34;#clean-json-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The first is clean_json_data which is actually unnecessary.  The only operation that is required is moving the pdf froma list to a dicktionary key.  It should and will be refactored.  As it stands now, I am leaving iut as an artifact of a previous workflow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clean_json_data&lt;/span&gt;(filtered_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Select the keys that I want from the dictionary&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# filter appropriatly into a df &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# write df to file&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(type(filtered_data))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(filtered_data)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filtered_data:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#creat a dictionary of columns and values for each row.  Combine them all into a df when we are done&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# each dictionary must be a row.... which makes perfect sense, but they can not be nested... &lt;/span&gt;
        item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        resources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;language&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        online_format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;online_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        original_format &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;original_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        kind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        image_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image_url&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        hassegments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hassegments&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        extract_timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extract_timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        timestampe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        mimetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mime_type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resources[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;: 
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noPdf&amp;#34;&lt;/span&gt;
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdf&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pdf
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;search_index&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;stringify-json-data&#34; &gt;Stringify Json Data
&lt;span&gt;
    &lt;a href=&#34;#stringify-json-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The Second is Stringify_json_data.  The imporatance of this function is that it creates strings from lists in order to properly integrate into the neo4j databse.  Iterables are permitted, however they can not be searched.  For my use case, I decided to create csv strings instead that can later be parsed if necessary.&lt;/p&gt;
&lt;p&gt;This function also moves the subject list to a dedicated key in the dictionary.  This is important because it is used to generate the subject tables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stringify_json_values&lt;/span&gt;(data):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dict &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(dict[key]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; list:
                tmp_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (dict[key]):
                    item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)
                    tmp_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(item)
                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_list

                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(dict[key])
        dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list

                
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;pandify-case-data&#34; &gt;Pandify Case Data
&lt;span&gt;
    &lt;a href=&#34;#pandify-case-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The next function creates a pandas dataframe from a list of dictionaries.  Thankfully this is easy to accommplish.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pandify_case_data&lt;/span&gt;(data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_df = pd.concat(data, sort=False)&lt;/span&gt;
    df&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(data)
    df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;nodify-case-data&#34; &gt;Nodify Case Data
&lt;span&gt;
    &lt;a href=&#34;#nodify-case-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Nodify creates transaction objects that can be saved to the neo4j databse.  I call the neomodel api to generate the results and save them into a dataframe that is used to apply the upload with a lambda function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_case_data&lt;/span&gt;(case_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data.notna()]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    case_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_case_node(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;], dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dates&amp;#39;&lt;/span&gt;],group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;], name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;], pdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;], shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;], subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;], title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;], url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;], subject_relationship&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_nodes
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-subject-pipeline&#34; &gt;The Subject Pipeline
&lt;span&gt;
    &lt;a href=&#34;#the-subject-pipeline&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The subject pipeline slices the subject data from the current search result page.&lt;/p&gt;
&lt;p&gt;It then identifies the unique subjects&lt;/p&gt;
&lt;p&gt;The subject_lookup_table is a dataframe containing the subjects returned by subject list.  They are unique only to the result page.&lt;/p&gt;
&lt;p&gt;The master_subject_table is then updated by the integrate_to_master_table function that identifes new subjects to integrate into the master table.&lt;/p&gt;
&lt;p&gt;finally, the nodify subject function creates transaction objects to be uploaded to the neo4j db.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the subject nodes transaction nodes and df&lt;/span&gt;
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice_subject_data(data)
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; identify_unique_subjects(subject_list)
    subject_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_subject_lookup_table(subject_list)
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integrate_to_master_table(subject_lookup_table,master_subject_table)
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;

    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_subjects(master_subject_table)
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;slice_subject_data&#34; &gt;slice_subject_data
&lt;span&gt;
    &lt;a href=&#34;#slice_subject_data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice_subject_data&lt;/span&gt;(data):
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; case &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; case[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject_list)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; subject_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;identify-unique-subjects&#34; &gt;Identify Unique Subjects
&lt;span&gt;
    &lt;a href=&#34;#identify-unique-subjects&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;identify_unique_subjects&lt;/span&gt;(subject_list):
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# insert the list to the set&lt;/span&gt;
    list_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(subject_list)
    &lt;span style=&#34;color:#75715e&#34;&gt;# convert the set to the list&lt;/span&gt;
    unique_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (list(list_set))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; unique_list

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;create-subject-lookup-table&#34; &gt;Create Subject Lookup Table
&lt;span&gt;
    &lt;a href=&#34;#create-subject-lookup-table&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_subject_lookup_table&lt;/span&gt;(subject_list):
    lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(subject_list, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;])
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lookup_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;nodify-subject&#34; &gt;Nodify Subject
&lt;span&gt;
    &lt;a href=&#34;#nodify-subject&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_subjects&lt;/span&gt;(master_subject_table):
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#df[df.isna().any(axis=1)]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_subject_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
    master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;uploading-case-and-subject-data&#34; &gt;Uploading Case and Subject data
&lt;span&gt;
    &lt;a href=&#34;#uploading-case-and-subject-data&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;With the transaction object dataframes created, we can then update the data to the database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_subjects_to_db(master_subject_table)
case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_cases_to_db(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;submit-subjects&#34; &gt;Submit Subjects
&lt;span&gt;
    &lt;a href=&#34;#submit-subjects&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;This function selects the subject nodes from the master table that have not been uploaded to the neo4j database.&lt;/p&gt;
&lt;p&gt;It identifies na in the submitted collumn in order to slice non-submitted nodes.&lt;/p&gt;
&lt;p&gt;If that table can be created we upload all of the df with the update function from the neoapi.  It simply calls the db and calls save() on the object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_subjects_to_db&lt;/span&gt;(master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes=master_subject_table[[master_subject_table[&amp;#39;submitted&amp;#39;] == np.nan]]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty:   
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
         &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
        master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;submit-cases&#34; &gt;Submit Cases
&lt;span&gt;
    &lt;a href=&#34;#submit-cases&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Initially i had copy and pasted the subject submission function. I realized that the checks were unnecessary.   I am assuming that each result is unique.  Therefore, every case is uploaded.  If it proves that there are duplicates in the database, the neo4j cypher language would permit me to prune those duplicate edges.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_cases_to_db&lt;/span&gt;(case_data):
        &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;### in theory none of the cases wouldhave been submitted becasue i am pulling them from file.  There is no need to check.. Just submit&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data[&amp;#39;submitted&amp;#39;].isna()].copy()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;##pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#if non_submitted_nodes.empty:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    return case_data&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#else:&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
    &lt;span style=&#34;color:#75715e&#34;&gt;#Assume all are submitted..&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_data.update(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;submit-the-relationships&#34; &gt;Submit the Relationships
&lt;span&gt;
    &lt;a href=&#34;#submit-the-relationships&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The final step is to relate the cases to the subject nodes.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;relationship_list= create_relationship_table(case_data=case_data, master_subject_table=master_subject_table)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is accomplished by calling the relationship function declared in the Case class declared in the neomodel api.&lt;/p&gt;
&lt;p&gt;View the reference below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Case&lt;/span&gt;(StructuredNode):
    uid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UniqueIdProperty()
    date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    dates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) 
    shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#primary_topic = StringProperty(unique_index=True, required=True)&lt;/span&gt;
    title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StringProperty(unique_index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, required&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    subject_relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Subject&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IS_SUBJECT&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;create-relationship-table&#34; &gt;Create Relationship Table
&lt;span&gt;
    &lt;a href=&#34;#create-relationship-table&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;To create the relationships the case_data and the master_subject_table are necessary.&lt;/p&gt;
&lt;p&gt;for every case a relationship is created to every subject within its subject list.&lt;/p&gt;
&lt;p&gt;It is important to note, that in order for this function to work correctly, the cases and subjects must first be submitted to the database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_relationship_table&lt;/span&gt;(case_data, master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data[])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#test = master_subject_table[&amp;#39;subject&amp;#39;]&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# select &lt;/span&gt;
    relationship_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(case_data)):
        unique_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;][row])])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_dataframe)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; subject_row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(unique_dataframe)):
            case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unique_dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[subject_row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            &lt;span style=&#34;color:#75715e&#34;&gt;#create relationship&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject)&lt;/span&gt;
            relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(case&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subject_relationship,subject)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(relationship)&lt;/span&gt;
            relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(relationship)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; relationship_list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;putting-everything-together&#34; &gt;Putting Everything Together
&lt;span&gt;
    &lt;a href=&#34;#putting-everything-together&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#realtor_graph.py&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;#from neo4j_connect_2 import NeoSandboxApp&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import neo4j_connect_2 as neo&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import GoogleServices as google&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#from pyspark.sql import SparkSession&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#from pyspark.sql.functions import struct&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; cgitb &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lookup
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; code
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dbm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dumb
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; doctest &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; master
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hmac &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; trans_36
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; mimetypes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; platform &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; node
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pty &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; master_open
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; re &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sub
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; unittest.util &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unorderable_list_difference
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; urllib.parse &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; non_hierarchical
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; neomodel &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (config, StructuredNode, StringProperty, IntegerProperty,
    UniqueIdProperty, RelationshipTo, BooleanProperty, EmailProperty, Relationship,db)
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#75715e&#34;&gt;#import NeoNodes as nn&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#import GoogleServices&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neo4jClasses
&lt;span style=&#34;color:#75715e&#34;&gt;#import sparkAPI as spark&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; neoModelAPI &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; neo
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#75715e&#34;&gt;#from neoModelAPI import NeoNodes as nn&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataUploadFunctions&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload_df&lt;/span&gt;(self,df):
        &lt;span style=&#34;color:#75715e&#34;&gt;#df.apply(lambda x: pprint(str(x) + str(type(x))))&lt;/span&gt;
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(node_list)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  node_list
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_to_df&lt;/span&gt;(self,df1,df2,lookup_value :str, lookup_key: str):
        df1[lookup_value] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df1[lookup_key]
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df1.columns)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df1)&lt;/span&gt;
        
        val  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df1[lookup_value]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(dict(zip(df2[lookup_key],  df2[lookup_value])))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; val

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_relationships&lt;/span&gt;(self,source_node, target_node):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(source_node)&lt;/span&gt;
        rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; source_node ,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target_node)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rel

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DataPipelineFunctions&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_df_to_csv&lt;/span&gt;(self,df,path: str):
        cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
        path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,path])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(path,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
            df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(path, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; path

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_city_nodes&lt;/span&gt;(self,df):
        city_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_name&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_city_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; city_nodes

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_url_nodes&lt;/span&gt;(self,df):
        url_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_realtor_url&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_realtor_search_url_node(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; url_nodes
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_root_nodes&lt;/span&gt;(self,df):
        root_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_realtor_url&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_root_node(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; root_nodes

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_country_nodes&lt;/span&gt;(self,df):
        country_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_country_node(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_name),axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; country_nodes
        

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_unique_country_df&lt;/span&gt;(self,df):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(subset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;difference([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_code&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;]), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_state_nodes&lt;/span&gt;(self,df):
        state_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_state_node(code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_code, name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_name),axis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; state_nodes    

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;return_unique_state_df&lt;/span&gt;(self,df):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(subset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;columns&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;difference([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_node&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_code&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_code&amp;#39;&lt;/span&gt;]), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df)&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rename_columns&lt;/span&gt;(self,df, mapper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_name&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_code&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor_url&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_realtor_url&amp;#39;&lt;/span&gt;}):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename(columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mapper)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_country_code&lt;/span&gt;(self,country_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; country_code

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_country_name&lt;/span&gt;(self,country_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;United States of America&amp;#34;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; country_name

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;upload_df&lt;/span&gt;(self,df):
        &lt;span style=&#34;color:#75715e&#34;&gt;#df.apply(lambda x: pprint(str(x) + str(type(x))))&lt;/span&gt;
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        pprint(node_list)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;  node_list
        &lt;span style=&#34;color:#75715e&#34;&gt;#df[&amp;#39;server_node&amp;#39;] =  node_list&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df)&lt;/span&gt;
        
        


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_url_relationships&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        update_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;url_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city_node), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        pprint(update_list)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; update_list
        &lt;span style=&#34;color:#75715e&#34;&gt;#rel = self.df.url.connect(self.df.city)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_city_relationships&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        update_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_node), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        update_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;city_node&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_node), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        pprint(update_list)
        &lt;span style=&#34;color:#75715e&#34;&gt;#rel = self.df.url.connect(self.df.city)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_state_relationships&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df.columns)&lt;/span&gt;
        neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique_state_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_node[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country,target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique_state_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_node[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        &lt;span style=&#34;color:#75715e&#34;&gt;#update_list = self.unique_state_nodes.apply(lambda x: neo.neoAPI.create_relationship(source = x.state_node.country,target = x.country_node.name), axis=1)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(update_list)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#rel = self.df.url.connect(self.df.city)&lt;/span&gt;




    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;group_by_state&lt;/span&gt;(self):
        grouped &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(by &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;state_name&amp;#34;&lt;/span&gt;)
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_data_to_pandas_df&lt;/span&gt;(self,file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; file_path &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:

            &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open (file_path) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; file:
                df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read_json(file)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_city_column&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_city_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
        
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(df.city_nodes)&lt;/span&gt;



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_states_column&lt;/span&gt;(self):

        unique_states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;drop_duplicates(subset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(state_dict)&lt;/span&gt;

        unique_states[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unique_states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_state_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_name, code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_states)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.df[&amp;#39;state_nodes&amp;#39;] = unique_states[&amp;#39;state_nodes&amp;#39;] where unique_states[state_name] = self.df_stateName&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;state_node&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_name&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.df[&amp;#39;state_node&amp;#39;] =&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df[&amp;#39;state_name&amp;#39;].map(unique_states))&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(dict(zip(unique_states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_name,  unique_states&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state_node)))
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(self.df)&lt;/span&gt;

        
     
        &lt;span style=&#34;color:#75715e&#34;&gt;#mask = dfd[&amp;#39;a&amp;#39;].str.startswith(&amp;#39;o&amp;#39;)&lt;/span&gt;
        
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.df[&amp;#39;state_nodes&amp;#39;] = self.df.apply(lambda x: neo.create_state_node(name = x.state_name, code = x.state) if x not in states_dict else states_dict[x], axis=1)&lt;/span&gt;
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_url_column&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realtor_url&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x : neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_url_node(url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x, searched&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;))


    

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_cwd&lt;/span&gt;():
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cwd

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_files&lt;/span&gt;(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd(), input_directory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;):
    
    path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([cwd,input_directory])
    file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [f &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; glob&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;glob(path &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;**/*.json&amp;#34;&lt;/span&gt;, recursive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)]
  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;instantiate_neo_model_api&lt;/span&gt;():
    uri &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7a92f171.databases.neo4j.io&amp;#34;&lt;/span&gt;
    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;neo4j&amp;#34;&lt;/span&gt;
    psw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RF4Gr2IJTNhHlW6HOrLDqz_I2E2Upyh7o8paTwfnCxg&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;instantiate_neo_model_session(uri&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;uri,user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user,psw&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;psw)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prepare_data_pipeline&lt;/span&gt;():
    pipeline_functions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DataPipelineFunctions()
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_data_to_pandas_df()
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_country_name()
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_code&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_country_code()
    master_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename_columns(master_df)
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;city_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_city_nodes(master_df)
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_url_nodes(master_df)
    master_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_root_nodes(master_df)

    
    master_df_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_df_to_csv(master_df,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;master_df.csv&amp;#39;&lt;/span&gt;)

    

    
    state_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_unique_state_df(master_df)
    state_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_state_nodes(state_df)
    state_df_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_df_to_csv(state_df,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_df.csv&amp;#39;&lt;/span&gt;)
    

    country_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;return_unique_country_df(master_df)
    country_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_node&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_country_nodes(country_df)
    country_df_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_df_to_csv(country_df,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country.csv&amp;#39;&lt;/span&gt;)


    



    &lt;span style=&#34;color:#75715e&#34;&gt;#upload nodes&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;master_df&amp;#34;&lt;/span&gt; : master_df, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;state_df&amp;#39;&lt;/span&gt; : state_df, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_df&amp;#39;&lt;/span&gt;: country_df}



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_json_data&lt;/span&gt;(file):
    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open (file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;)
  
    &lt;span style=&#34;color:#75715e&#34;&gt;# Reading from file&lt;/span&gt;
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;json_pipeline&lt;/span&gt;(file_list, master_subject_table):
    case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; file_list:
        
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_json_data(file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data[0])&lt;/span&gt;
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#filtered_data = filter_json_data(json_data = data, filter = filter)&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the case nodes transaction nodes and df&lt;/span&gt;
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clean_json_data(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stringify_json_values(data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pandify_case_data(case_data)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_case_data(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)
        
        &lt;span style=&#34;color:#75715e&#34;&gt;# Creating the subject nodes transaction nodes and df&lt;/span&gt;
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slice_subject_data(data)
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; identify_unique_subjects(subject_list)
        subject_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_subject_lookup_table(subject_list)
        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; integrate_to_master_table(subject_lookup_table,master_subject_table)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;
        case_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_counter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; len(case_data)

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nodify_subjects(master_subject_table)

        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table[&amp;#39;transaction&amp;#39;])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#lets save data to the database&lt;/span&gt;

        master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_subjects_to_db(master_subject_table)
        case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; submit_cases_to_db(case_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Create Relationships&lt;/span&gt;

        relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_relationship_table(case_data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;case_data, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
    




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_cases_to_db&lt;/span&gt;(case_data):
        &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;

        &lt;span style=&#34;color:#75715e&#34;&gt;### in theory none of the cases wouldhave been submitted becasue i am pulling them from file.  There is no need to check.. Just submit&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data[&amp;#39;submitted&amp;#39;].isna()].copy()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;##pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#if non_submitted_nodes.empty:&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    return case_data&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#else:&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
    &lt;span style=&#34;color:#75715e&#34;&gt;#Assume all are submitted..&lt;/span&gt;
    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_data.update(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data

    &lt;span style=&#34;color:#75715e&#34;&gt;#Relationships must need to be created following saving to the df&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#relationships = create_relationship_table(case_data, master_subject_table)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;submit_subjects_to_db&lt;/span&gt;(master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#unsubmitted = master_subject_table[master_subject_table.notna()]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes=master_subject_table[[master_subject_table[&amp;#39;submitted&amp;#39;] == np.nan]]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty:   
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
         &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(x))
        non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#test = non_submitted_nodes.iloc[32][&amp;#39;transaction&amp;#39;]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#return_obj = neo.neoAPI.update(test)&lt;/span&gt;
        master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tester&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Dolly&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_relationship_table&lt;/span&gt;(case_data, master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case_data[])&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#test = master_subject_table[&amp;#39;subject&amp;#39;]&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# select &lt;/span&gt;
    relationship_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(case_data)):
        unique_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (master_subject_table[master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;][row])])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_dataframe)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; subject_row &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(unique_dataframe)):
            case &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            subject &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unique_dataframe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iloc[subject_row][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]
            &lt;span style=&#34;color:#75715e&#34;&gt;#create relationship&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(case)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject)&lt;/span&gt;
            relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_relationship(case&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subject_relationship,subject)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(relationship)&lt;/span&gt;
            relationship_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(relationship)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; relationship_list




        
    &lt;span style=&#34;color:#75715e&#34;&gt;#create relationship between the case and each uid in the unique_data_frame_transaction_list &lt;/span&gt;
    pprint(unique_dataframe)


    &lt;span style=&#34;color:#75715e&#34;&gt;## Creating the realation table&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Thoughts&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# pass subject and case table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# case_subject list collumn&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# where that list is in the master table&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#return  the subjects &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# make a connection to between each subject and the case in the returned tableuid in the table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# return a transaction list &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# with the list commit a transaction for eachn &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#case_data= filter_case_data(data)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_case_data&lt;/span&gt;(case_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#non_submitted_nodes = case_data[case_data.notna()]&lt;/span&gt;
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_data[case_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;notna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    case_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_case_node(date &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;], dates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dates&amp;#39;&lt;/span&gt;],group &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;group&amp;#39;&lt;/span&gt;], name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;], pdf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;], shelf_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;shelf_id&amp;#39;&lt;/span&gt;], subject&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;], title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;], url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;], subject_relationship&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

    case_data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; case_nodes
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; case_data




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_case_data&lt;/span&gt;(data):
    pprint(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nodify_subjects&lt;/span&gt;(master_subject_table):
    non_submitted_nodes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isna()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;any(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
    &lt;span style=&#34;color:#75715e&#34;&gt;#df[df.isna().any(axis=1)]&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(non_submitted_nodes)&lt;/span&gt;
    non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; non_submitted_nodes[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x :neo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;neoAPI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_subject_node(name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x))
    master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(non_submitted_nodes)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrate_to_master_table&lt;/span&gt;(subject_lookup_table, master_subject_table):
    &lt;span style=&#34;color:#75715e&#34;&gt;#check_if subject in list is in subject of the table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# if so drop it from the temp table&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# append what is left to the master table &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject_lookup_table)&lt;/span&gt;
    test &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; master_subject_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]
    unique_dataframe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (subject_lookup_table[&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;subject_lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isin(test)])
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(unique_dataframe)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#duplicate_list = (master_subject_table[~master_subject_table[&amp;#39;subject&amp;#39;].isin(subject_lookup_table[&amp;#39;subject&amp;#39;])])&lt;/span&gt;
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat([master_subject_table,unique_dataframe])
    &lt;span style=&#34;color:#75715e&#34;&gt;#master_subject_table.update(unique_dataframe)&lt;/span&gt;
    master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reset_index(inplace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(master_subject_table.duplicated())&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; master_subject_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_subject_lookup_table&lt;/span&gt;(subject_list):
    lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(subject_list, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;])
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    lookup_table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lookup_table

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;identify_unique_subjects&lt;/span&gt;(subject_list):
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# insert the list to the set&lt;/span&gt;
    list_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set(subject_list)
    &lt;span style=&#34;color:#75715e&#34;&gt;# convert the set to the list&lt;/span&gt;
    unique_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (list(list_set))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; unique_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slice_subject_data&lt;/span&gt;(data):
    subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; case &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; case[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;]
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(subject_list)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; subject_list

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pandify_case_data&lt;/span&gt;(data):
    &lt;span style=&#34;color:#75715e&#34;&gt;#case_df = pd.concat(data, sort=False)&lt;/span&gt;
    df&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(data)
    df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; df
        
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stringify_json_values&lt;/span&gt;(data):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dict &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        subject_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(dict[key]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; list:
                tmp_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; (dict[key]):
                    item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;)
                    tmp_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(item)
                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_list

                dict[key] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(dict[key])
        dict[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject_list&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subject_list

                
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data
                

    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clean_json_data&lt;/span&gt;(filtered_data):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Select the keys that I want from the dictionary&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# filter appropriatly into a df &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# write df to file&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#print(type(filtered_data))&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(filtered_data)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filtered_data:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#creat a dictionary of columns and values for each row.  Combine them all into a df when we are done&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# each dictionary must be a row.... which makes perfect sense, but they can not be nested... &lt;/span&gt;
        item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;item&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        resources &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;resources&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        language &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;language&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        online_format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;online_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        original_format &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;original_format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        kind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        image_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image_url&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        hassegments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hassegments&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        extract_timestamp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extract_timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        timestampe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        mimetype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mime_type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resources[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;: 
            pdf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noPdf&amp;#34;&lt;/span&gt;
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pdf&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pdf
        data[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;search_index&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index
    


    &lt;span style=&#34;color:#75715e&#34;&gt;# convert to strings maybe move into another function to be called.  Actually will definitely move to a nother function &lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; filtered_data
    &lt;span style=&#34;color:#75715e&#34;&gt;#uid = UniqueIdProperty()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;##date = date&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#dates = dates&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#group = group&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#id = id &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pdf = pdf &lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#shelf_id = shelf_id&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#subject = subject&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#primary_topic = primary_topic&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#title = title&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#url = url&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#description = description&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#source_collection = source_collection&lt;/span&gt;




&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filter_json_data&lt;/span&gt;(json_data, filter):
    &lt;span style=&#34;color:#75715e&#34;&gt;# Using dict()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Extracting specific keys from dictionary&lt;/span&gt;

    filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;contributor&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dates&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;digitized&amp;#39;&lt;/span&gt;]
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict((k, json_data[k]) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; filter &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; json_data)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_master_subject_table&lt;/span&gt;():
    table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame()
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;transaction&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    table[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;submitted&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nan
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(table)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    neo_applified &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instantiate_neo_model_api()
    cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_cwd()
    file_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_files(cwd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cwd)
    master_subject_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_master_subject_table()
    json_pipeline(file_list&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_list, master_subject_table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;master_subject_table)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;#neo_sandbox_app = instantiate_neo_sandbox_app()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#google_creds = load_google_creds()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#sheets_app = instantiate_sheets_app(google_creds.credentials)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#drive_app = instantiate_drive_app(google_creds.credentials)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#googleAPI = instantiate_google_API()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#sparkAPI = instantiate_spark_API()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#neoAPI = NeoAPI()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#nodified_df = pandas_functions.nodify_dataframe()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#test()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#google_api = googleServices.GoogleAPI()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;###neo_model_api = instantiate_neo_model_api()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;###df_pipeline_dictionary = prepare_data_pipeline()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#final_df_dictionary = upload_data_pipeline_to_neo(df_pipeline_dictionary)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#for k,v in final_df_dictionary.items():&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    cwd = os.getcwd()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    path = str(k) +&amp;#34;Final&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    path = os.sep.join([cwd,path])&lt;/span&gt;

     &lt;span style=&#34;color:#75715e&#34;&gt;#   with open(path, &amp;#34;w&amp;#34;) as file:&lt;/span&gt;
     &lt;span style=&#34;color:#75715e&#34;&gt;#       v.to_csv(path, index=False)&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#prepared_dfs = prepare_pandas_df()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(prepared_df)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#upload_df_to_db(df = prepared_df, neo_model_api = neo_model_api)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conduct Legal Research with AI: Part 0</title>
      <link>https://blog.jnapolitano.io/posts/loc_crawler/</link>
      <pubDate>Mon, 16 May 2022 13:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/loc_crawler/</guid>
      <description>&lt;h1 id=&#34;crawling-the-library-of-congress-api&#34; &gt;Crawling the Library of Congress API
&lt;span&gt;
    &lt;a href=&#34;#crawling-the-library-of-congress-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The United States Library of Congress maintains a rest api for developers to crawl their collections.  It is an open source tool that anyone can access in order to conduct research. Check out the documenation at &lt;a href=&#34;https://libraryofcongress.github.io/data-exploration/&#34;&gt;https://libraryofcongress.github.io/data-exploration/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-crawler&#34; &gt;Creating a crawler
&lt;span&gt;
    &lt;a href=&#34;#creating-a-crawler&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I took the approach of writing a generator that produces a search result page object that can be operated upon with each iteration.&lt;/p&gt;
&lt;p&gt;The first step is to create a search result page object.&lt;/p&gt;
&lt;p&gt;The code below documents the search_result page.  It contains a number of helper functions to convert the nodes within the result to json or graphml.  The code can also be used to generate a networkx in memory graph.&lt;/p&gt;
&lt;h3 id=&#34;the-search-result-object&#34; &gt;The Search Result Object
&lt;span&gt;
    &lt;a href=&#34;#the-search-result-object&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_results_page&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.loc.gov/collections&amp;#34;&lt;/span&gt;,collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united-states-reports&amp;#34;&lt;/span&gt;,json_parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fo=json&amp;#34;&lt;/span&gt;,results_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=79&amp;#34;&lt;/span&gt;,query_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;,page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp=&amp;#34;&lt;/span&gt;,page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_search_url(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_data()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_to_json()
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.soup_html = self.html_parse()&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_next_url()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_json&lt;/span&gt;(self, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json, outfile)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_pandas&lt;/span&gt;(self):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas_edgelist(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_csv&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.csv&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(output_name)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_graphml&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;, file_num&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.graphml&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_graphml(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph, output_name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_to_file&lt;/span&gt;(self,data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(data, outfile)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_gen_2&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#root = root &lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(k, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((k, {&amp;#39;type&amp;#39; : k}))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#(1, 2, color=&amp;#39;red&amp;#39;, weight=0.84, size=300)\&lt;/span&gt;
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(root,k, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root , k, {&amp;#34;relationship&amp;#34; : &amp;#34;of&amp;#34;}, {&amp;#34;type&amp;#34; : &amp;#39;root&amp;#39;}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(data,type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data)
                &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((data, {&amp;#34;type&amp;#34; : data}))&lt;/span&gt;
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(previous_k, data, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k)
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((previous_k ,data,{&amp;#39;relationship&amp;#39;: &amp;#34;is&amp;#34;}, {&amp;#39;type&amp;#39; : data}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root,data))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph 

    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_runner&lt;/span&gt;(self,data,graph):
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
            &lt;span style=&#34;color:#75715e&#34;&gt;#root = item[&amp;#39;title&amp;#39;]&lt;/span&gt;
            graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(edge_list)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_generator&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title_testing&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(k)
                    edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root , k))
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data)
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((previous_k ,data))
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root,data))

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node_list, edge_list 
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.json_graph = self.create_json_graph()&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_json_graph&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = nx.Graph(self.response_json)&lt;/span&gt;
        graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_dict_of_dicts(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json)
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = json_graph.node_link_graph(self.response_json)&lt;/span&gt;
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw(graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.node_list = self.node_generator`&lt;/span&gt;



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_result_node&lt;/span&gt;(self):
     
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    column_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string()

                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;append_to_data_list&lt;/span&gt;(self,rnge,d):&lt;span style=&#34;color:#75715e&#34;&gt;#rename to _data_list&lt;/span&gt;
        request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;: rnge,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majorDimension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMNS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: [d]
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_body
        &lt;span style=&#34;color:#75715e&#34;&gt;#data_list.append(request_body_tmp)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_column_to_range&lt;/span&gt;(self,column_key):
        
        rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Sheet1&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; column_key &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rnge
                

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colnum_string&lt;/span&gt;(self,num_columns):
        string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#34;conlum_string&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num_columns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            num_columns, remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)
            string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remainder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(string)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_columns_to_lookup_table&lt;/span&gt;(self):

        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;first_map_columns_print&amp;#39;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#num_columns_tmp = self.num_columns&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
                num_columns_tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;second_map_Columns_print&amp;#39;)&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_columns_tmp)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
       
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append range to request... &lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append collumn to batch lookup&lt;/span&gt;
                

                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;column_request_list_generator&lt;/span&gt;(self):
        request_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
            rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_column_to_range(k)
            request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append_to_data_list(rnge,v)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(request_body)&lt;/span&gt;
            request_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(request_body)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_list





        &lt;span style=&#34;color:#75715e&#34;&gt;#return column_lookup_table&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_next_url&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pagination&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;next&amp;#39;&lt;/span&gt;])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_url&lt;/span&gt;(self,base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num):
        url_sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
        page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(str(page_num))
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([json_parameter,results_per_page,page_param])
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; query_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; query
        search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url_sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([base_url,collection,query])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(search_url)&lt;/span&gt;
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_url

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;say_hello&lt;/span&gt;(self):
        pprint(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;base_url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request_data&lt;/span&gt;(self):
        headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.11 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;
                }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url,headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response_to_json&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;html_parse&lt;/span&gt;(self):
        soup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BeautifulSoup(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(soup)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; soup

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flatten_result&lt;/span&gt;(self):
        flat_result_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]:
            flat_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flatten(item)
            flat_result_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(flat_json)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flat_result_list

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-generator&#34; &gt;The Generator
&lt;span&gt;
    &lt;a href=&#34;#the-generator&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The generator yields a search result page if the pagination link included in the response is valid.&lt;/p&gt;
&lt;p&gt;Depending on your use case you could pass the page_num and collection you would like to crawl.&lt;/p&gt;
&lt;p&gt;The api is limited to 80 results per minute.  The sleep function limits calls to the desired rate.  The amount of results returned can be passed to the search result page_object.  Review the code above to see which values can be passed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_result_generator&lt;/span&gt;(condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;#column_lookup_table = {}&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
    page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    column_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;)
        search_results_page_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_search_results_page_object(page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; search_results_page_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
            page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-runner-function&#34; &gt;The Runner Function
&lt;span&gt;
    &lt;a href=&#34;#the-runner-function&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;To initiate the crawl simply run the algorithm below.  It writes each result page to json.&lt;/p&gt;
&lt;p&gt;As a follow up project, I will post how to integrate the data returned into a neo4j database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; obj &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; search_result_generator():   
        page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; cd(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output_2&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;hahaha&amp;#39;)&lt;/span&gt;
            obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_json(file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_graphml(file_num= page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_pandas()&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_to_file(data = obj.dict_of_dicts, file_num = page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_csv()&lt;/span&gt;
        write_last_page_num(page_num)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Search Results Crawled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(page_num))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;putting-everything-together&#34; &gt;Putting Everything Together
&lt;span&gt;
    &lt;a href=&#34;#putting-everything-together&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The code below is the entire program as it stands.  There is built in functionality to upload the results to a google sheet if that is what you desire using an extension of the google api.   That code can be found at &lt;a href=&#34;https://github.com/justin-napolitano/GoogleAPI&#34;&gt;https://github.com/justin-napolitano/GoogleAPI&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#library_of_congress_scraper.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; __future__ &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; print_function
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; bs4 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BeautifulSoup
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lxml.etree &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; etree
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; xml.etree.ElementTree &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; ET
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint
&lt;span style=&#34;color:#75715e&#34;&gt;#import load_vars as lv&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; html
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; yaml
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; yaml &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Loader, Dumper
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; glob
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os.path
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; googleapiclient.discovery &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; build
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google_auth_oauthlib.flow &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; InstalledAppFlow
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.auth.transport.requests &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Request
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.oauth2.credentials &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Credentials
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.oauth2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; service_account
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; googleapiclient.http &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; MediaIoBaseDownload, MediaFileUpload
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flatten_json &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; flatten
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; networkx &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; nx
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; networkx.readwrite &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; json_graph
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tracemalloc
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#75715e&#34;&gt;#from ratelimiter import RateLimiter&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Context manager for changing the current working directory&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, newPath):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expanduser(newPath)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __enter__(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savedPath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcwd()
        os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;newPath)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __exit__(self, etype, value, traceback):
        os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chdir(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;savedPath)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_results_page&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.loc.gov/collections&amp;#34;&lt;/span&gt;,collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united-states-reports&amp;#34;&lt;/span&gt;,json_parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fo=json&amp;#34;&lt;/span&gt;,results_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=79&amp;#34;&lt;/span&gt;,query_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;,page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp=&amp;#34;&lt;/span&gt;,page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_search_url(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_data()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_to_json()
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.soup_html = self.html_parse()&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_next_url()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_json&lt;/span&gt;(self, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json, outfile)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_pandas&lt;/span&gt;(self):
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas_edgelist(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(df)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_csv&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.csv&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_pandas()
        df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_csv(output_name)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_graphml&lt;/span&gt;(self,file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;, file_num&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.graphml&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write_graphml(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;graph, output_name)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_to_file&lt;/span&gt;(self,data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, file_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result_&amp;#39;&lt;/span&gt;,file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, extension &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.json&amp;#34;&lt;/span&gt;):
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(file_num)
        output_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_name &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; extension
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(output_name, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; outfile:
            json&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(data, outfile)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_gen_2&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#root = root &lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(k, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((k, {&amp;#39;type&amp;#39; : k}))&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#(1, 2, color=&amp;#39;red&amp;#39;, weight=0.84, size=300)\&lt;/span&gt;
                    graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(root,k, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;)
                    &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root , k, {&amp;#34;relationship&amp;#34; : &amp;#34;of&amp;#34;}, {&amp;#34;type&amp;#34; : &amp;#39;root&amp;#39;}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_node(data,type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data)
                &lt;span style=&#34;color:#75715e&#34;&gt;#node_list.append((data, {&amp;#34;type&amp;#34; : data}))&lt;/span&gt;
                graph&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_edge(previous_k, data, relationship &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;, type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k)
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((previous_k ,data,{&amp;#39;relationship&amp;#39;: &amp;#34;is&amp;#34;}, {&amp;#39;type&amp;#39; : data}))&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#edge_list.append((root,data))&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph 

    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_runner&lt;/span&gt;(self,data,graph):
        
        node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
            &lt;span style=&#34;color:#75715e&#34;&gt;#root = item[&amp;#39;title&amp;#39;]&lt;/span&gt;
            graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_gen_2(data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list, graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; graph)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(edge_list)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;node_generator&lt;/span&gt;(self, data, root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;title_testing&amp;#39;&lt;/span&gt;, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [], previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; dict:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_list:
                    node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(k)
                    edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root , k))
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_value&amp;#39;)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#save k&lt;/span&gt;
                previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k
                previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (root , k)
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(v,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list, previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k, previous_edge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(data) &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; list:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
                &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#39;passing_data&amp;#39;)&lt;/span&gt;

                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;node_generator(item,root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root, node_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node_list,edge_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_list,previous_k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_k, previous_edge&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; previous_edge)
                &lt;span style=&#34;color:#75715e&#34;&gt;#create_edge to k&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#75715e&#34;&gt;#this item is no longer a dictionary or list&lt;/span&gt;
            pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;appending_data&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;#create edge to k&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; data &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                node_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(data)
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((previous_k ,data))
                edge_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((root,data))

    &lt;span style=&#34;color:#75715e&#34;&gt;#flatten(hierarchak)_dict)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; node_list, edge_list 
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.json_graph = self.create_json_graph()&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_json_graph&lt;/span&gt;(self):
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = nx.Graph(self.response_json)&lt;/span&gt;
        graph &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_dict_of_dicts(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json)
        &lt;span style=&#34;color:#75715e&#34;&gt;#graph = json_graph.node_link_graph(self.response_json)&lt;/span&gt;
        nx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;draw(graph)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph
        
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.node_list = self.node_generator`&lt;/span&gt;



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_result_node&lt;/span&gt;(self):
     
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    column_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string()

                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;append_to_data_list&lt;/span&gt;(self,rnge,d):&lt;span style=&#34;color:#75715e&#34;&gt;#rename to _data_list&lt;/span&gt;
        request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;: rnge,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majorDimension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMNS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: [d]
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_body
        &lt;span style=&#34;color:#75715e&#34;&gt;#data_list.append(request_body_tmp)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_column_to_range&lt;/span&gt;(self,column_key):
        
        rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Sheet1&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; column_key &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rnge
                

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colnum_string&lt;/span&gt;(self,num_columns):
        string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(&amp;#34;conlum_string&amp;#34;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num_columns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            num_columns, remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)
            string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remainder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(string)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map_columns_to_lookup_table&lt;/span&gt;(self):

        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;first_map_columns_print&amp;#39;)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#num_columns_tmp = self.num_columns&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json_flat:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
                num_columns_tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table:
                    &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;second_map_Columns_print&amp;#39;)&lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns_tmp)&lt;/span&gt;
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;colnum_string(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_columns_tmp)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;num_columns &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
       
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append range to request... &lt;/span&gt;
                    &lt;span style=&#34;color:#75715e&#34;&gt;#append collumn to batch lookup&lt;/span&gt;
                

                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;column_request_list_generator&lt;/span&gt;(self):
        request_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_lookup_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():
            rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map_column_to_range(k)
            request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append_to_data_list(rnge,v)
            &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(request_body)&lt;/span&gt;
            request_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(request_body)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_list





        &lt;span style=&#34;color:#75715e&#34;&gt;#return column_lookup_table&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_next_url&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pagination&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;next&amp;#39;&lt;/span&gt;])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_url&lt;/span&gt;(self,base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num):
        url_sep &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
        page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(str(page_num))
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([json_parameter,results_per_page,page_param])
        query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; query_param &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; query
        search_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; url_sep&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([base_url,collection,query])
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(search_url)&lt;/span&gt;
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_url

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;say_hello&lt;/span&gt;(self):
        pprint(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;base_url)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request_data&lt;/span&gt;(self):
        headers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.11 (KHTML, like Gecko) Version/9.0.2 Safari/601.3.9&amp;#39;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Accept-Encoding&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;identity&amp;#39;&lt;/span&gt;
                }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search_url,headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;headers)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response_to_json&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;json()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;html_parse&lt;/span&gt;(self):
        soup&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BeautifulSoup(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;content,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(soup)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; soup

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flatten_result&lt;/span&gt;(self):
        flat_result_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;response_json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;results&amp;#39;&lt;/span&gt;]:
            flat_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flatten(item)
            flat_result_list&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(flat_json)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flat_result_list



&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_result&lt;/span&gt;():
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,dict_item,num_columns,colnum_string):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict_item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dict_item&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; colnum_string
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; num_columns
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;range &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_column_range_string()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_column_request()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_column_request&lt;/span&gt;(self):
        request_body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;: self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;range,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;majorDimension&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;COLUMNS&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: [self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value]
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; request_body

    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_column_range_string&lt;/span&gt;(self):

        rnge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;Sheet1&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;column_string &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rnge
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;colnum_string&lt;/span&gt;(self, num_columns):
        string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; num_columns &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            num_columns, remainder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; divmod(num_columns &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)
            string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; remainder) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; string

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google_drive&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,creds):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_drive_service(creds)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(self):
        pprint(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello I exist&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_drive_service&lt;/span&gt;(self, creds):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Shows basic usage of the Drive v3 API.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Prints the names and ids of the first 10 files the user has access to.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        SCOPES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#75715e&#34;&gt;#creds = None&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# The file token.json stores the user&amp;#39;s access and refresh tokens, and is&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# created automatically when the authorization flow completes for the first&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# time.&lt;/span&gt;

        service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;drive&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v3&amp;#39;&lt;/span&gt;, credentials&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;creds)

        &lt;span style=&#34;color:#75715e&#34;&gt;# Call the Drive v3 API&lt;/span&gt;
        results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;files()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list(
            pageSize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, fields&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nextPageToken, files(id, name)&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        items &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; results&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;files&amp;#39;&lt;/span&gt;, [])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; items:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No files found.&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Files:&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; items:
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{1}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;], item[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;]))

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; service
    
    

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_folder&lt;/span&gt;(self,title):
        drive_service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service
        file_metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(title),
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mimeType&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/vnd.google-apps.folder&amp;#39;&lt;/span&gt;
        }
        file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drive_service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;files()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_metadata,
                                            fields&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Folder ID: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;))



    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_spreadsheet_to_folder&lt;/span&gt;(self ,folder_id,title):
        drive_service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service
    
        file_metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(title),
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parents&amp;#39;&lt;/span&gt;: [folder_id],
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mimeType&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/vnd.google-apps.spreadsheet&amp;#39;&lt;/span&gt;,
        }

        res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; drive_service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;files()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create(body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;file_metadata)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute()
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(res)&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google_sheet&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,creds):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_sheet_service(creds)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_sheet_service&lt;/span&gt;(self,creds):
        service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; build(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sheets&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v4&amp;#39;&lt;/span&gt;, credentials&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;creds)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; service&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spreadsheets()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;google_creds&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,creds_path):

        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_creds(creds_path)
   
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_creds&lt;/span&gt;(self,creds_path):

        creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# The file token.json stores the user&amp;#39;s access and refresh tokens, and is&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# created automatically when the authorization flow completes for the first&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# time.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exists(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token.json&amp;#39;&lt;/span&gt;):
            creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Credentials&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_authorized_user_file(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;token.json&amp;#39;&lt;/span&gt;, SCOPES)
        &lt;span style=&#34;color:#75715e&#34;&gt;# If there are no (valid) credentials available, let the user log in.&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; creds &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;valid:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; creds &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expired &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh_token:
                creds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;refresh(Request())
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no creds&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                creds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; service_account&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Credentials&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_service_account_file(creds_path)
                &lt;span style=&#34;color:#75715e&#34;&gt;#creds = ServiceAccountCredentials.from_json_keyfile_name(&amp;#39;add_json_file_here.json&amp;#39;, SCOPES)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#flow = InstalledAppFlow.from_client_secrets_file(&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#    &amp;#39;credentials.json&amp;#39;, SCOPES)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;#creds = flow.run_local_server(port=0)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# Save the credentials for the next run&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#with open(&amp;#39;token.json&amp;#39;, &amp;#39;w&amp;#39;) as token:&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#    token.write(creds.to_json())&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; creds

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;():

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self,file_path):
        &lt;span style=&#34;color:#75715e&#34;&gt;#self.yaml_stream = file(&amp;#34;config.yaml&amp;#34;, &amp;#39;r&amp;#39;)&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_config(file_path)


    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_config&lt;/span&gt;(self,file_path):
        &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;test&amp;#34;)&lt;/span&gt;
        stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(file_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
        data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; yaml&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(stream,Loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Loader)
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(data)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_google_credentials_object&lt;/span&gt;(creds_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;credentials.json&amp;#39;&lt;/span&gt;):
    google_credentials_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_creds(creds_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; google_credentials_object
    
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_config_object&lt;/span&gt;(file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;config.yaml&amp;#39;&lt;/span&gt;):
    config_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; config(file_path)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; config_object


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search_result_generator&lt;/span&gt;(condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;#column_lookup_table = {}&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
    page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    column_lookup_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; condition &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
        time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;)
        search_results_page_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_search_results_page_object(page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; search_results_page_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;next_url &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
            page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (search_results_page_object)
        
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_search_results_page_object&lt;/span&gt;(base_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.loc.gov/collections&amp;#34;&lt;/span&gt;,collection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;united-states-reports&amp;#34;&lt;/span&gt;,json_parameter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fo=json&amp;#34;&lt;/span&gt;,results_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c=70&amp;#34;&lt;/span&gt;,query_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;,page_param &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sp=&amp;#34;&lt;/span&gt;,page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;#search = search_results(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(search.search_url)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#pprint(num_columns)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; search_results_page(base_url,collection,json_parameter,results_per_page,query_param,page_param,page_num)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_google_drive_object&lt;/span&gt;(google_creds):
    drive_service_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_drive(google_creds)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; drive_service_object

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_google_sheet_object&lt;/span&gt;(google_creds):
    sheet_service_object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_sheet(google_creds)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sheet_service_object

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create_new_google_sheet&lt;/span&gt;(google_drive_object,folder_id,title):
    sheet_meta_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; google_drive_object&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_spreadsheet_to_folder(folder_id, title)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sheet_meta_data

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flatten_result&lt;/span&gt;(result_json):
    flat_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flatten(result_json)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; flat_json

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_last_page_num&lt;/span&gt;(page_num):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last_page_num.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
        f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(str(page_num))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
    tracemalloc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start()
    &lt;span style=&#34;color:#75715e&#34;&gt;#rate_limiter = RateLimiter(max_calls=1, period=60)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#cd to output&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#result = create_search_results_page_object()&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#with cd(&amp;#34;output&amp;#34;):&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;#    result.write_to_file(data = result.dict_of_dicts, file_num = 1)&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; obj &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; search_result_generator():   
        page_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page_num
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; cd(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output_2&amp;#34;&lt;/span&gt;):
            &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#39;hahaha&amp;#39;)&lt;/span&gt;
            obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_json(file_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; page_num)
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_graphml(file_num= page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_pandas()&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.write_to_file(data = obj.dict_of_dicts, file_num = page_num)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#obj.to_csv()&lt;/span&gt;
        write_last_page_num(page_num)
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; Search Results Crawled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(page_num))


    
    snapshot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tracemalloc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;take_snapshot()
    top_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; snapshot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;statistics(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lineno&amp;#39;&lt;/span&gt;)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ Top 10 ]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; stat &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; top_stats[:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]:
        print(stat)


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    main()

        
        

    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The World Trade Organization, Governments, and International Trade</title>
      <link>https://blog.jnapolitano.io/posts/project-evolution-of-ngos/</link>
      <pubDate>Wed, 04 May 2022 14:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/project-evolution-of-ngos/</guid>
      <description>&lt;h1 id=&#34;the-world-trade-organization-governments-and-international-trade&#34; &gt;The World Trade Organization, Governments, and International Trade
&lt;span&gt;
    &lt;a href=&#34;#the-world-trade-organization-governments-and-international-trade&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;intro&#34; &gt;Intro
&lt;span&gt;
    &lt;a href=&#34;#intro&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;International Organizations are vital to the operation of International
politics. They regulate behaviors, facilitate communication, and promote
cooperation between states. The process by which International
Organizations come into being is well discussed in the literature,
however, not equally well debated is the process by which International
Organizations come to modify their operating procedure. Or in other
words, when the member states renegotiate the terms of their membership.&lt;/p&gt;
&lt;h2 id=&#34;the-question&#34; &gt;The Question
&lt;span&gt;
    &lt;a href=&#34;#the-question&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;International Organizations are vital to the operation of International
politics. They regulate behaviors, facilitate communication, and promote
cooperation between states. The process by which International
Organizations come into being is well discussed in the literature,
however, not equally well debated is the process by which International
Organizations come to modify their operating procedure. Or in other
words, when the member states renegotiate the terms of their membership.&lt;/p&gt;
&lt;h2 id=&#34;literature-review&#34; &gt;Literature Review
&lt;span&gt;
    &lt;a href=&#34;#literature-review&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Kenneth Waltz argues that domestic politics is irrelevant to the
calculus of states. He argues primarily that states act according to the
actions of other states. The bureaucracy, the public, and the legal
systems are all factors not considered in his framework. He does however
take the position that &amp;ldquo;politics determines economics (Waltz 2010)&amp;rdquo;, but
does not further his sociological analyses. In other words, he accepts
that the behavior of states is derive from the socially constructed
political process, but does not analyze human systems to other than the
state when attempting to predict state behavior. (Waltz 2010)&lt;/p&gt;
&lt;p&gt;Robert Keohane builds upon Waltz. He takes the assumption that there are
inherent common interests between states seeking wealth and power, and
the maximization of absolute gains. States are then presumed to possess
preferences dependent on the division of resources and information
within the international system. To accomplish goals and to minimize
insecurity states then cooperate by forming international regimes
defined to be, &amp;ldquo;sets of implicit or explicit principles, norms, rules,
and decision-making procedures around which actor&amp;rsquo;s expectations
converge in a given area of international relations&amp;rdquo; (Keohane, 2005, p
57). In bargaining for international trade deals, states seek to
maximize power and wealth for all states involved in the process.
(Keohane, 2005)&lt;/p&gt;
&lt;p&gt;Fearon also adopts this position, however also assumes that states seek
when bargaining the maximization of gains across time. Therefore the
logic of the iterated prisoners dilemma is used to explain cooperation.
Because of the shadow of the future, or the expectations of further
interaction between states, the most rational choice to maximize gains
across time is for states to cooperate and to normalize rules in the
form of a legalistic International Organizations. (Fearon 1998)&lt;/p&gt;
&lt;p&gt;Moravsic adopts a liberal stance, breaking from the neorealist, as well
as the regime theorist position that the factors of the international
system determines state behavior. He argues that the preferences of
powerful coalitions within states and the combined societal will to
carry them out are the basis for state behavior. His theory rests upon
three core assumptions. 1. State actors primarily define state
preference. 2. Domestic institutions and their structure exert influence
on the realization of coalition preferences. 3. &amp;ldquo;The configuration of
interdependent state preferences determines state behavior (Moravsic,
1997).&amp;rdquo; Thus, powerful social coalitions pressure representative
governments, controlling for regime type, to bargain on the behalf of
their interests in the international game. This &amp;ldquo;two stage model&amp;rdquo; of
state behavior accounts for both regime theorist and realist
assumptions.&lt;/p&gt;
&lt;p&gt;Putnam further formulizes the process with the application of the
two-level game metaphor (1988). Level 1 is considered the domestic game
played by representative leaders to appease the domestic interests of
individuals, groups, and political coalitions. Level 2 is the
international game in which states compete to appease domestic
posturing. The win-set, the possible set of actions considered
acceptable to both the domestic coalition and the international
coalition, is dependent upon three major factors. 1. The distribution of
power, preferences, and possible coalitions among level 2 constituents.
2. The size of the representative body of political institutions. 3. The
strategies of the level 1 negotiators. The net effect of the three
limiting factors results in a win-set most probable to be ratified by
the domestic institutions. In other words, representatives bargaining on
behalf of powerful domestic coalitions must negotiate trade packages
acceptable to their domestic handlers. To apply principal-agent theory
to the intuition, the coalitions are the principle handling the
representative, their agent.&lt;/p&gt;
&lt;p&gt;Dahl&amp;rsquo;s work on bureaucratic politics and policy networks within the city
of New Haven Connecticut is the foundation on which I will build to
identify the process of preferences becoming the action of a state. The
basis of his argument rests on the fact that certain actors possess the
authority to draft and to pass legislation. The units are the most
important actors within the policy network. All of those actors that
depend on the actor with authority must lobby to institute policy. The
power of the policy network is defined by their expertise, their social
standing, and their ability to satisfy the interests of the person or
persons in positions of authority. Depending on the issue at hand and
those actors mobilized the policy network is highly dynamic. (Dahl,
2005); (Dahl, 1957)&lt;/p&gt;
&lt;p&gt;Finnemore explores the ways in which international institutions acquire
a degree of autonomy and then may influence the states in the system by
creating rules and regulation to serve the interests of the organization
itself. Her work relies heavily on sociological analysis of human
systems. At both the international level and the domestic level of
politics Finnemore&amp;rsquo;s work argues that as organizations are comprised of
social actors the legal and social rules by which the institutions
operate by serve primarily to benefit the preservation of the group.
However, their legitimacy is dependent upon &amp;ldquo;external recognition&amp;rdquo; by
those ruled over (Finnemore 1999). In order, then to retain authority
and legitimacy, the government bureaucracy must development effective
methods of socialization to convince the public of its legitimacy.
Scaled up to International Organizations bureaucratic legitimacy is
equally dependent upon external validity. But as states are the only
units capable of effectively providing that validity, International
Organizations are wholly dependent on powerful states to enforce norms.
(Finnemore 1999); (Finnemore 1993); Finnemore 2001)&lt;/p&gt;
&lt;h2 id=&#34;theoretical-intuition&#34; &gt;Theoretical Intuition
&lt;span&gt;
    &lt;a href=&#34;#theoretical-intuition&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Ultimately one must put forth a state centric argument in order to best
explain the operation of International Organizations and the
International System more generally. This heart of this paper will rest
on the assumption that the state as an organization is most responsible
for influencing the character of the International System, and
ultimately the modification of International Organizations. It does not
however, assume the state to be a rational entity capable of responding
to external stimuli in a way that maximizes its gains. Rather, as all
states depend on domestic legitimacy in order to exist, states
ultimately operate in order to appease the demands of powerful domestic
constituencies, often without regard to the actions of other states.&lt;/p&gt;
&lt;p&gt;The structure of state can be thought of as a pyramidal hierarchy built
upon increasing levels of authority within the state. The base of which
is comprised of all of those people without any employment by the state.
Moving up from there may be civil servants of the state bureaucracy.
Ultimately the pinnacle of which is the institution or institutions
responsible for the management of all lower levels. The most important
factor binding the structure is legitimacy as each level is inherently
dependent on the external recognition of its legitimacy by the levels
beneath it. For instance, the Executive of the United States is
essentially without power, except for that power which is recognized
Congress and by extension the general public. A similar argument example
could be drawn for the military, the police, or any other institution
within a state.&lt;/p&gt;
&lt;p&gt;The actual codification of this social process is by definition the law
of a state. It may be thought of as the enforcement mechanism by which
the social structure is maintained and behavior standardized. Those
within the state with the authority to create law are those with the
power to socially reinforce their position of authority.[1] Thus it is
paramount that a leader once in a position of authority also has the
means of the state available to him in order to buttress his status.
Otherwise law will be ignored and the state will devolve into anarchy.&lt;/p&gt;
&lt;p&gt;At the international the same processes occurs. Powerful states, be it
military power, or economic power, reinforce norms among weaker states
in order to standardize behavioral outcomes. Great state in of
themselves may be able to accomplish this by force, but the legitimacy
of those actions will always be perceived by lesser states as entirely
illegitimate. Unless a legal institution comprised of members is
developed in order to give the lesser states the appearance of
influence, all attempts to institute norms from a position of absolute
power will surely fail. Hence the breakup of the English Empire. If
nations, with distinct identities from that of the hegemon are to be
managed a legal structure accepted to be legitimate must be created.&lt;/p&gt;
&lt;p&gt;Thus, International Organizations come into being. They are an attempt
to institute a legal order binding to member states in order to minimize
risk ultimately at the behest of powerful states. The process by which
weak states join the organization is straightforward. They do so because
the powerful coalitions within their state seek to acquire the resources
available to them when entering an International Organization. Such
states will adapt to the rules of the IO, but only to the extent that
the IO serves their interest. Otherwise they will refuse to join. Once
they have joined, they will recognize the legitimacy of the powerful
state, and the IO only if the disciplinary measures are effective, and
threaten their ability to rule domestically. There is also the option to
join the Organization established by another powerful state in the
International System. If such an option is available, something like the
order prior to the first world war, and that of the cold war will come
into being.&lt;/p&gt;
&lt;p&gt;For an IO then to be successful in setting the standards of the entire
international system, all powerful states must be able to converge about
a set of common interests. In other words for an international
organization to truly standardize norms throughout the international
system all great powers must act in collaboration with one another to
reinforce agreements to avoid undermining the legitimacy of the
institution. The difficulty in achieving this is found in the fact the
dictates of the international order do not determine great power
behavior, but rather the domestic forces which challenge the authority
of its leaders do. The prime example of which is the United States war
in Iraq under President George W. Bush. Despite the protests of the UN
member states, the government was forced to act under fear of losing
popularity among its base.&lt;/p&gt;
&lt;p&gt;Only in highly technical and rather nonpolitical areas of international
affairs does it appear that coalitions of powerful states can manage to
converge about a set of interests. Especially is this true when it comes
to renegotiating the terms of membership.&lt;/p&gt;
&lt;h2 id=&#34;hypothesis&#34; &gt;Hypothesis
&lt;span&gt;
    &lt;a href=&#34;#hypothesis&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Therefore, I argue that international organizations modify the terms of
their agreements only when it is in the interest of the powerful
domestic constituencies of a coalition of powerful member states. A
state cannot go it alone at the international level, nor will it
successfully ratify the agreement if it is not in the interest of the
domestic camp.&lt;/p&gt;
&lt;h2 id=&#34;design-of-the-test&#34; &gt;Design of the Test
&lt;span&gt;
    &lt;a href=&#34;#design-of-the-test&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I adopt the intuition of the two-level game, but avoid the calculus by
way of preferences. Instead I adopt a calculus by way of expectations.
Preferences are unbounded. Expectations however are the set of expected
outcomes bounded by law and authority. In other words, expectations are
preferences bounded by the exercise of a state&amp;rsquo;s institutions. As
institutions are expected to act in such a way as to maintain
legitimacy, their free exercise is not unbounded. As opposed to the
convergence about preferences, I expect that win-sets will converge
about a common set of expectations that arise from the internal process
of maintaining political legitimacy. To test my hypothesis then, I first
analyze the international organization. I then discern which states are
the most powerful. I then look to the issue, to see whether it is an
issue is supported by domestic coalitions of the powerful states. If
that issue is agreed upon by the most influential states within the
organization it is likely that new agreements will be signed, and the
policy of the organization will change.&lt;/p&gt;
&lt;h2 id=&#34;case-study&#34; &gt;Case Study
&lt;span&gt;
    &lt;a href=&#34;#case-study&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The transition of the GATT (the General Agreement on Tariffs and Trade)
to the World Trade Organization will serve as the case study of
analysis. I will analyze the foundations of the GATT, the basic terms
under which the states agreed to enter into the agreement. Then I will
look to the World Trade Organization, and seek to explain why the most
powerful states in the organization sought to expand the GATT and why
they agreed to the terms.&lt;/p&gt;
&lt;p&gt;The GATT, formed after the Second World War, spearheaded by the efforts
of the United States and the United Kingdom, was the only multilateral
instrument governing international trade from 1948 until 1995 (Cite WTO
website). The point of its development was to liberalize trade and
reduce tariffs between members. Interestingly within less than a month
if its signing, the United States sought to expand the agreement to
govern all of international trade. The Havana conference of 1947 was to
do just that and to develop the International Trade Organization. The
deal proved to be incapable of ratification in the legislatures of many
member states, notable the Congress of the United States the leader of
the movement. Thus, marking the first in a series of failed attempts to
create a multilateral body regulating trade.&lt;/p&gt;
&lt;p&gt;The GATT however was not an unsuccessful agreement. Periodic rounds of
negotiation, and subsequent agreements expanded the jurisdiction of the
organization and granted to it greater legitimacy as the years passed.
The agreements eight round of agreements, the Uruguay Round of 1986-94
is the most instrumental as it established the World Trade Organization.
Why is it that previous attempts to develop the body failed, but in this
one instance it came into being?&lt;/p&gt;
&lt;p&gt;The question is ultimately answered by identifying the expectations of
the domestic structures of the most powerful states attempting to
renegotiate the deal. Or what was it that the domestic structure
pressured the leaders of the state to do? This type of analysis will
vary between states as it is dependent upon the institutional
organization of the state. To simplify the process for this analysis, I
look primarily to who is responsible for ratifying the trade deal, and
who is it they are responsible to.&lt;/p&gt;
&lt;p&gt;The most powerful states at the time of the creation of the World Trade
Organization were in order the United States, Japan, Germany, France,
Italy, the United Kingdom, Canada, China, Brazil, and then Spain.[2] I
can further reduce the important states to the United States, the
European Union, Japan, and Canada, collectively known as the quad, as
they together account for most of international trade and the largest
share of international GDP (Databank: World Development Indicators).&lt;/p&gt;
&lt;p&gt;In the United States its Senate is officially responsible for the
ratification of international treaties. However, due to legislative
enactments the process of ratification at the time the Uruguay rounds
was modified to require a majority vote in each of house of its Congress
and the approval of the President. The President and his staff were
responsible for the negotiation of the deal. Thus, the expectations to
analyze are those of the constituencies which the members of the
Congress and president rely on for appointment to their office. This
differs between each group and is thus a very difficult process to
determine. It is dependent upon the perceptions of the Congressman, and
the advice of their most important allies. They will vote for a deal
only if it is perceived to be a political win. A thorough analysis would
require reviewing the vote of each senator and then inferring the
constituents responsible for their appointment and the expectations of
each group. As this is untenable, reviewing the actions of the president
is actually a valid point of view to determine the aggregate
expectations of those within the domestic structure as the ratification
of the bill is dependent upon their support. Thus, the president is
negotiating on their behalf. (Trade Act of 1974, 19 U.S.C. Chapter 12);
(U.S. Constitution, Article 1 Sect. 3); (U.S. Constitution, Amendment
17)&lt;/p&gt;
&lt;p&gt;The European Union is comprised of a very different political structure
of hierarchal authority. Individual states do not negotiate trade deals.
Rather the European Commission comprised of appointed members negotiate
deals on the behalf of the entire union. These deals must be approved by
the European Parliament which is comprised of elected representatives
from each of the members states, but the ultimate power to ratify the
agreements falls with the council. Members of the council are the heads
of state each EU member state. Their position in power is dependent upon
the domestic structures of their individual states. Nonetheless, when
bargaining internationally, they are doing so in order to maintain their
position as leader. Thus, they will not agree to a deal that will
compromise their domestic coalitions. (The European Council, 2018); (The
European Parliament: About Parliament).&lt;/p&gt;
&lt;p&gt;The Japanese &amp;ldquo;Diet&amp;rdquo;, the state&amp;rsquo;s version of parliament is responsible
for the ratification of treaties and international trade deals. The
executive cabinet is solely responsible for the negotiation of the deals
aided by its bureaucracy. However, as Japan is a parliamentary state,
unlike the United States, the prime minister, the executive of the
country, possesses almost free ability to institute law. This is due to
party discipline, and the fact that as the head of the government, the
prime minister is also the head of the party in possession of the
majority seats in the parliament. What then the executive negotiates
will most likely be passed. There is surely an internal bargaining
process, but it is not as crucial to the process as that of the United
States. (Fundamental Structure of the Government of Japan, 2007);
(Structure of the National Diet, 2014).&lt;/p&gt;
&lt;p&gt;Canada is also structured around a Parliamentary government. The
executive committee like that of japan is centered around the prime
minister. The prime minister and his cabinet negotiate the trade deals
and then put it to parliament for ratification. The same rules of party
discipline apply here as in Japan. The likelihood of a trade deal
negotiated by the executive cabinet being ratified is very high.
(Parliamentary Primer).&lt;/p&gt;
&lt;p&gt;According to my hypothesis then, these states will renegotiate the GATT
agreements when it is in the domestic interests of the heads of states
responsible for the ratification of the trade deal. The most difficult
state to accomplish in would be the United States as the greatest number
of individuals are responsible for ratification. And, because the
possible domestic win-set is the smallest in relationship to the other
powers. It is then expected that the United States will find it most
difficult to ratify the World Trade Organization agreement.&lt;/p&gt;
&lt;h2 id=&#34;findings&#34; &gt;Findings
&lt;span&gt;
    &lt;a href=&#34;#findings&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;As expected the Quad States (United States, Canada, Japan, EU) were by
far the most important states involved in the process of negotiation.
Their economic power and political clout were necessary to develop an
international organization with actual effect on international trade.
Thus, the states with economic value were essentially ignored in this
process. (VanGrasstek, 2013).&lt;/p&gt;
&lt;p&gt;Ratification of the deals also depended on the perceptions of the
domestic coalitions of states engaged in talks. Dispute resolutions,
agricultural subsidies, and auto tariffs were the most contentious
issues between the Quad. Each sate feared primarily the delegitimizing
their domestic governments. The United States and the EU for instance
disputed over pork tariffs seriously enough to threaten the deal
outright. The United States senators and the president were concerned
that a deal that lifted subsidies would put a large number of their
constituencies out of a job. If this were to occur they thought their
positions of authority would be compromised. (VanGrasstek, 2013).&lt;/p&gt;
&lt;p&gt;The solution to the problem came about in the form of substantial
dispute resolution mechanisms to solve the enforcement problem. The
United States as the most influential member of the organization most
likely assumed that it could use the Dispute Settlement Body to its own
end. The other states in the system perceived it to be capable enough to
bind the United States to internationally agreed to norms and
consensuses on trade. The goal of course to put an end to politically
disruptive tariff spikes targeted at politically relevant sectors of
economies. Or in other words to regulate international trade in order to
put an end to trade wards. This to all states at the time seemed to be
vital to securing the domestic expectations of their constituencies. The
intent of all measures is to ensure a domestic win at the time of
signing, but also to ensure ongoing win-sets across time (Fearon, 1998).
The World Trade Organization embodies that it is inherently an
organization designed to satisfy the demands of the members states not
to act as an independent body. (VanGrasstek, 2013).&lt;/p&gt;
&lt;h2 id=&#34;discussion&#34; &gt;Discussion
&lt;span&gt;
    &lt;a href=&#34;#discussion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Regarding when international organizations likely to modify their
agreements, they appear to do so when a coalition of powerful states can
agree to do so. Such a straightforward answer to the question seems
obvious however, in the process of research many questions arose as to
if this is actually true. I began this research from an entirely
different point of view. I sought to answer whether Non-Governmental
Organizations (NGO) could influence Inter-Governmental organization to
adopt new policy.&lt;/p&gt;
&lt;p&gt;The answer to that question led me to study states as opposed NGO&amp;rsquo;s
because in order for an NGO to influence an IGO powerful states must be
recruited to the cause. The global civil society literature is fairly
adamant about this. Thus, I led astray from studying only NGO&amp;rsquo;s and
instead sought to understand why states may modify existing IGO&amp;rsquo;s or
develop new ones.&lt;/p&gt;
&lt;p&gt;States are a far more interesting unit of analyses as all forms of
influence within the state could be studied to determine if domestic
politics really does lead to international politics. To this I would say
that there is no doubt that international politics begins at home. The
Logic of the Two Level Game cannot be ignored. Leaders dependent upon
domestic coalitions must act accordingly to realize their expectations
or risk losing office. From this one could see how domestic perceptions
of economic conditions, human rights, or any other issue can influence a
state&amp;rsquo;s behavior.&lt;/p&gt;
&lt;p&gt;Thus, when approaching IGO&amp;rsquo;s and the forces which influence their
operation, not only is it more interesting look to states, but also far
more functional than attempting to discern the influence of NGO&amp;rsquo;s
operating within states. Such an analysis requires testimony from policy
makers, meeting minutes, extensive media analysis, and a harmonious
relationship with an NGO, an IGO, and a state bureaucracy. Frankly
speaking these resources were not available, nor was I able to establish
contact with any of the important players. Therefore, one had to default
to observation from the point of view of a neutral observer.&lt;/p&gt;
&lt;p&gt;In so doing it became evident that states, whether one likes it or not,
solely possess the legal authority and material capability to influence
IGO&amp;rsquo;s. Civil society on the other hand, while influential, is without
the authority or means to actually bring about legitimate change.
Institutions trusted by citizens, or even possibly willed into being by
military force, are those with the legitimate power to actually enforce
laws and norms. As such, I adopted Dahl&amp;rsquo;s intuition into decision making
that institutions with legal authority regulate and standardize decision
making procedures and also patterns of influence. These institutions are
the field in which those seeking to acquire influence play, and
therefore adapt to the rules. Without then needing to further delve into
this process I chose to instead analyze relationships between states, as
opposed to analyzing the operations of NGO&amp;rsquo;s.&lt;/p&gt;
&lt;p&gt;This paper is in need of expansion however in one crucial category. It
assumes wholeheartedly that the leaders of states are entirely dependent
on the whims of their domestic coalitions and that they are incapable of
employing any tactics to manipulate them. A new research project that
explores the topic in depth is in need. To make the assumption that the
preferences of influential leaders do not play a role in international
politics is too great a pill to swallow.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34; &gt;Conclusion
&lt;span&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;When do International Organizations renegotiate the terms of their
agreements? They do so when powerful states within the organization
compel it do so. The logic of the Two-Level game though indicates that
the process is dependent on the expectations of domestic coalitions.
Also, the relative power between states makes it so that only a minority
of powerful states are actually important when attempting to renegotiate
deals. A win-set is achieved when the expectations of the domestic
coalitions of the most relevant states converge about a deal. The
transition of the GATT to the World Trade Organization as case study
demonstrates this process. The Quad states, the most relevant state in
the international economy Rather, it is apparent that the need for
politicians to maintain their domestic coalitions was more important to
the calculus of the leaders than the acquisition of power or wealth.&lt;/p&gt;
&lt;h2 id=&#34;works-cited&#34; &gt;Works Cited
&lt;span&gt;
    &lt;a href=&#34;#works-cited&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Dahl, Robert Alan. &amp;ldquo;Who Governs? Democracy and power in an American
city.&amp;rdquo; (2005).&lt;/p&gt;
&lt;p&gt;Dahl, Robert A. &amp;ldquo;The concept of power.&amp;rdquo; Systems Research and Behavioral
Science 2, no. 3 (1957): 201-215.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Databank: World Development Indicators&amp;rdquo;
&lt;a href=&#34;http://databank.worldbank.org/data/reports.aspx?source=2&amp;amp;series=NY.GDP.PCAP.PP.CD&#34;&gt;http://databank.worldbank.org/data/reports.aspx?source=2&amp;amp;series=NY.GDP.PCAP.PP.CD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;European Council: Council of the European Union&amp;rdquo;.
&lt;a href=&#34;http://www.consilium.europa.eu/en/&#34;&gt;http://www.consilium.europa.eu/en/&lt;/a&gt;. (2018)&lt;/p&gt;
&lt;p&gt;Fearon, James D. &amp;ldquo;Bargaining, enforcement, and international
cooperation.&amp;rdquo; International organization 52, no. 2 (1998): 269-305&lt;/p&gt;
&lt;p&gt;Finnemore, Martha. &amp;ldquo;Norms, culture, and world politics: insights from
sociology&amp;rsquo;s institutionalism.&amp;rdquo; International organization 50, no. 2
(1996): 325-347&lt;/p&gt;
&lt;p&gt;Finnemore, Martha, and Stephen J. Toope. &amp;ldquo;Alternatives to
&amp;ldquo;legalization&amp;rdquo;: richer views of law and politics.&amp;rdquo; International
Organization 55, no. 3 (2001): 743-758.&lt;/p&gt;
&lt;p&gt;Finnemore, Martha. &amp;ldquo;International organizations as teachers of norms:
the United Nations Educational, Scientific, and Cutural Organization and
science policy.&amp;rdquo; International Organization47, no. 4 (1993): 565-597.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Fundamental Structure of the Government of Japan&amp;rdquo;.
&lt;a href=&#34;http://japan.kantei.go.jp/constitution_and_government_of_japan/fundamental_e.html&#34;&gt;http://japan.kantei.go.jp/constitution_and_government_of_japan/fundamental_e.html&lt;/a&gt;.
(2007)&lt;/p&gt;
&lt;p&gt;Keohane, Robert. After Hegemony: Cooperation and Discord in the World
Political Economy. Princeton University Press. (2005)&lt;/p&gt;
&lt;p&gt;Moravcsik, Andrew. &amp;ldquo;Taking preferences seriously: A liberal theory of
international politics.&amp;rdquo; International organization 51, no. 4 (1997):
513-553.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Parliamentary Primer&amp;rdquo;.
&lt;a href=&#34;https://lop.parl.ca/About/Parliament/Publications/index-e.html&#34;&gt;https://lop.parl.ca/About/Parliament/Publications/index-e.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Putnam, Robert D. &amp;ldquo;Diplomacy and domestic politics: the logic of
two-level games.&amp;rdquo; International organization 42, no. 3 (1988): 427-460.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The European Parliament about Parliament&amp;rdquo;
&lt;a href=&#34;http://www.europarl.europa.eu/aboutparliament/en&#34;&gt;http://www.europarl.europa.eu/aboutparliament/en&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Structure of the National Diet&amp;rdquo;
&lt;a href=&#34;http://www.shugiin.go.jp/internet/itdb_english.nsf/html/statics/guide/structure.htm&#34;&gt;http://www.shugiin.go.jp/internet/itdb_english.nsf/html/statics/guide/structure.htm&lt;/a&gt;.
(2014)&lt;/p&gt;
&lt;p&gt;VanGrasstek, Craig. The History and Future of the World Trade
Organization. World Trade Organization Publication.
&lt;a href=&#34;https://www.wto.org/english/res_e/booksp_e/historywto_e.pdf&#34;&gt;https://www.wto.org/english/res_e/booksp_e/historywto_e.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(2013)&lt;/p&gt;
&lt;p&gt;Waltz, Kenneth N. Theory of international politics. Waveland Press.
(2010)&lt;/p&gt;
&lt;p&gt;[1] Power is to be defined as the ability to make someone do what they
otherwise would not do.&lt;/p&gt;
&lt;p&gt;[2] The European Union is officially a signee of the WTO. It is
important to note that five of the top ten states are EU members. As
trade regulation must be uniform throughout the EU, the European Union
representatives negotiated on behalf of their member. For the purpose of
this paper I will treat the EU as a single state to avoid greatly
complicating the analysis&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Voting Behavior, Textual Analysis, and the Spirit of the Law</title>
      <link>https://blog.jnapolitano.io/posts/masterpiece/</link>
      <pubDate>Mon, 02 May 2022 13:40:32 +0000</pubDate>
      
      <guid>https://blog.jnapolitano.io/posts/masterpiece/</guid>
      <description>&lt;h1 id=&#34;voting-behavior-textual-analysis-and-the-spirit-of-the-law&#34; &gt;Voting Behavior, Textual Analysis, and the Spirit of the Law
&lt;span&gt;
    &lt;a href=&#34;#voting-behavior-textual-analysis-and-the-spirit-of-the-law&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;introduction&#34; &gt;Introduction
&lt;span&gt;
    &lt;a href=&#34;#introduction&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h2 id=&#34;hypothesis&#34; &gt;Hypothesis
&lt;span&gt;
    &lt;a href=&#34;#hypothesis&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;When considering the individual Supreme Court Justices, their voting behavior may be best described by the interaction between their ideological precepts and the facts of the case.  Their vote will not be dictated entirely by the constraint of precedent.&lt;/p&gt;
&lt;h2 id=&#34;experimental-design&#34; &gt;Experimental Design
&lt;span&gt;
    &lt;a href=&#34;#experimental-design&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In this paper, the legal model is tested against the attitudinal model.   The intent is to best describe the process of Supreme Court decision making in relationship to Masterpiece Cakeshop, Ltd. v. Colorado Civil Rights Commission {cite}&lt;code&gt;masterpiececake&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-legal-model&#34; &gt;The Legal Model
&lt;span&gt;
    &lt;a href=&#34;#the-legal-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The Legal Model consists of three major components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;precedent &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;text (constitutional and statutory provisions) &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;legislative intent. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The initial analysis of Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission {cite}&lt;code&gt;masterpiececake&lt;/code&gt; will consist of an argument dependent on all three.&lt;/p&gt;
&lt;h3 id=&#34;the-attitudinal-model&#34; &gt;The Attitudinal Model
&lt;span&gt;
    &lt;a href=&#34;#the-attitudinal-model&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The proposed attitudinal model will derive ideological values for the individual justices according to subject area &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.  This is accomplished by cross-referencing the current Supreme Court justices’ votes on the merits across time &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.  The first set of scores describe general voting behavior.  The next by first amendment cases.  Finally, by first amendment cases controlling for establishment &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; and free exercise &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; clause. and external situations &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.  When applying these to the facts of the case in Masterpiece Cakeshop Ltd. vs. Colorado Civil Rights Board (2018) it is expected that ideological scores will predict the outcome.&lt;/p&gt;
&lt;h2 id=&#34;legal-model-case-study&#34; &gt;Legal Model Case Study
&lt;span&gt;
    &lt;a href=&#34;#legal-model-case-study&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Write an intro.  Facts, text,&lt;/p&gt;
&lt;h3 id=&#34;the-facts-of-the-case&#34; &gt;The Facts of the Case
&lt;span&gt;
    &lt;a href=&#34;#the-facts-of-the-case&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The facts of the case in this instance are pulled directly from the syllabus of the Supreme Court Opinion {cite}&lt;code&gt;masterpiececake&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Masterpiece Cakeshop, Ltd., is a Colorado bakery owned and operated by Jack Phillips, an expert baker and devout Christian. In 2012, he told a same-sex couple that he would not create a cake for their wedding celebration because of his religious opposition to same-sex marriages—marriages that Colorado did not then recognize—but that he would sell them other baked goods, e.g., birthday cakes. The couple filed a charge with the Colorado Civil Rights Commission (Commission) pursuant to the Colorado Anti-Discrimination Act (CADA), which prohibits, as relevant here, discrimination based on sexual orientation in a “place of business engaged in any sales to the public and any place offering services . . . to the public.&amp;quot; Under CADA’s administrative review system, the Colorado Civil Rights Division first found probable cause for a violation and referred the case to the Commission. The Commission then referred the case for a formal hearing before a state Administrative Law Judge (ALJ), who ruled in the couple’s favor. In so doing, the ALJ rejected Phillips’ First Amendment claims: that requiring him to create a cake for a same-sex wedding would violate his right to free speech by compelling him to exercise his artistic talents to express a message with which he disagreed and would violate his right to the free exercise of religion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;the-pertinent-text&#34; &gt;The Pertinent Text
&lt;span&gt;
    &lt;a href=&#34;#the-pertinent-text&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The first step of the test is to test Mr. Phillips claims against pertinent text of the controlling statutory and constitutional provisions.  Therefore, the relevant texts relating to the free speech claims are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The First Amendment of the Constitution &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;The Colorado Public Accommodation law {cite}:&lt;code&gt;crs-title24-art-34-part-6-section 601-604-2016&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These will be tested against the claim that the Colorado Law unduly burdens Mr. Phillips by abridging his free exercise of religion, as well as his freedom of speech.  &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-first-ammendment-text&#34; &gt;The First Ammendment Text
&lt;span&gt;
    &lt;a href=&#34;#the-first-ammendment-text&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;I begin with the First Amendment &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.  Due to its brevity, I include the entire text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Congress shall make no law respecting an establishment of religion, or prohibiting the free exercise thereof; or abridging the freedom of speech, or of the press; or the right of the people peaceably to assemble, and to petition the Government for a redress of grievances. (U.S. Const. amend I)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;colorado-state-law-title-24-article-34-part-6-section-601-604-2016&#34; &gt;Colorado State Law Title 24, Article 34, Part 6, Section 601-604 2016
&lt;span&gt;
    &lt;a href=&#34;#colorado-state-law-title-24-article-34-part-6-section-601-604-2016&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The pertinent clause of the Colorado State Law in question reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a discriminatory practice and unlawful for a person, directly or indirectly, to refuse, withhold from, or deny to an individual or a group, because of disability, race, creed, color, sex, sexual orientation, marital status, national origin, or ancestry, the full and equal enjoyment of the goods, services, facilities, privileges, advantages, or accommodations of a place of public accommodation (Colorado Revised Statute, Title 24, Article 34, Part 6, Section 601-604 2016).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;standing&#34; &gt;Standing
&lt;span&gt;
    &lt;a href=&#34;#standing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Based simply on textual grounds, Mr. Phillips’ free exercise, and freedom of speech claims are completely unfounded.  The first amendment as written does not protect the individual resident of an individual state from undue abridgements of personal religious and speech freedoms.  If we adopt the standard of incorporation as written into the precedent the first amendment still does not seem to support the claims.1  Speech, if understood according to Webster, is “communication or expression of thoughts in spoken words (Webster&amp;rsquo;s New World 2016).” The action of making a cake, cannot be in any way considered speech by this definition. speech.  Symbolic speech, whatever that means, is not written into the Constitution.&lt;/p&gt;
&lt;h4 id=&#34;the-first-ammendment-standing&#34; &gt;The First Ammendment Standing
&lt;span&gt;
    &lt;a href=&#34;#the-first-ammendment-standing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;At first reading, Mr. Phillips claim &lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; does not seem to be legitimate.  If in fact the Colorado Law abridges religious freedoms, or individual speech in any way the amendment reads that “Congress shall make no law”.  At least when reading the text of the First Amendment as plainly as possible it does not apply directly to the case at hand. As a matter of fact, it does not apply to state in any capacity. The difficulty however, is that the Court has incorporated into the common law this amendment.  Therefore, it considered applicable to the states, and thus operable upon the residents of the individual states.  Forgoing this truth, we also run into a few textual problems.  For instance, how is it that speech is defined? Or exactly what constitutes a prohibition of the free exercise of religion?  These questions may only be answer by consulting precedent.&lt;/p&gt;
&lt;h4 id=&#34;colorado-state-law-standing&#34; &gt;Colorado State Law Standing
&lt;span&gt;
    &lt;a href=&#34;#colorado-state-law-standing&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Contrary to Mr. Phillips’ claim the law does not seem to unduly burden any religious freedoms, nor speech in general.  Rather, it is a generally applicable law, that extends protections in places of public accommodation to people according to sexual-orientation.  Reading this in contrast to the First Amendment, there are no direct violations.&lt;/p&gt;
&lt;h3 id=&#34;legislative-intent&#34; &gt;Legislative Intent
&lt;span&gt;
    &lt;a href=&#34;#legislative-intent&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If the Court relied entirely on the textual evidence to judge, it is apparent that the case would not have been heard by the bench. However, this is obviously not the case.  As such, Legislative Intent must also be considered in this analysis.  This section will attempt to discover the intent behind the First Amendment in order to judge Mr. Philips’ claims against original intent.&lt;/p&gt;
&lt;h4 id=&#34;the-first-ammendment-intent&#34; &gt;The First Ammendment Intent
&lt;span&gt;
    &lt;a href=&#34;#the-first-ammendment-intent&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The First Amendment along with the remaining nine were first introduced to the floor of Congress in 1789 to address the concern that specific individual liberties could be eroded by the powers of the national congress. According to James Madison, in order to limit the power of the legislature.  The case being that it is the most powerful branch, and therefore most likely to be abused (Lloyd 1789).  At the behest of the representatives of the individual states, as well as their ratification committees, the National Congress in order to ratify the Constitution agreed to ratify a Bill of Rights.&lt;/p&gt;
&lt;p&gt;Each individual clause of the amendment is important to the discussion.  For the purpose of this paper, I will discuss the legislative history of the Establishment and Free Exercise Clauses, as well as the Freedom of Speech Clauses.  Then a short discussion on the drafting process of the entire amendment will be had.&lt;/p&gt;
&lt;h4 id=&#34;freedom-of-speech&#34; &gt;Freedom of Speech
&lt;span&gt;
    &lt;a href=&#34;#freedom-of-speech&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The ideological and textual foundations for the free speech clauses come from English heritage.  For instance, the English Bill of Rights, drafted in 1689, states “that the freedome of speech and debates or proceedings in Parlyament ought not to be impeached or questioned in any court or place out of Parlyament (1 Will. And Mar. Sess. 2, c. 2.)”&lt;/p&gt;
&lt;p&gt;The individual states in their constitutions drafted protection for at least the “freedom of the press.” &lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;  The state of Pennsylvania in their 1790 Constitution states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The printing presses shall be free to every person who undertakes to examine the proceedings of the legislature, or any branch of government: And no law shall ever be made to restrain the right thereof.  The Free communication of the thoughts and opinions is one of the invaluable rights of man; and every citizen may freely speak, write and print on any subject, being responsible for the abuse of that liberty.  (Dallas 1791, xxxiv)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Evident here is the strong common law and statutory practice of protection of the rights of the individual to publish material no matter the content, however, there does not seem to be a protection for symbolic expressions of speech such as the production of a cake.&lt;/p&gt;
&lt;p&gt;The state ratification committees offer the best insight into the matter of free speech, as it meant to those most concerned with protecting that right.  The Honorable James Lincoln, of South Carolina puts the point most succinctly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why in this Constitution, is a total silence with regard to the liberty of the press?  Was it forgotten? Impossible!  Then it must have been purposely omitted…. The Liberty of the press was the tyrants scourge — it was the true friend and firmest supporter of civil liberty; therefore, why pass it by in silence?&amp;hellip; Pray, sir, what security have we for a republican form of government, when it depends on the mere will and pleasure of a few men, who, with an army, navy, and rich treasury at their back, may change and alter it as they please?  It may be said they will be sworn.  Sir, the king of Great Britain, at his coronation, swore to govern his subjects with justice and mercy.  We were then his subjects, and continued so for a long time after.  He would be glad to know how he observed his oath.  If, then, the king of Great Britain forswore himself, what security have we that a future President and four or five senators — like himself — will think more solemnly of so sacred an obligation than he did?   (Elliot 1888, 314-316)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The most obvious concern is the failure of the Constitution to draft specific protections to secure the individual states from the type of tyranny experienced under the English Crown.  So too is a bit of realism present.  How is it that men, men of high rank, can be expected to uphold their oaths to govern with regard to the people?  When it is likely that men that acquire power will in many cases do the utmost to retain that power.  It is difficult to make the argument that these men had much of a consideration for individual speech, or any form of symbolic speech &lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;The Congressional accounts support the same basic idea.  James Madison proposed to the House, that the “people shall not be deprived or abridged of their right to speak, to write, or to publish their sentiments; and the freedom of the press, as one of the great bulwarks of liberty, shall be inviolable (Lloyd 1789).  Roger Sherman, also put to the floor, that “people have certain natural rights which are retained by them when they enter into society. Such are the rights… of Speaking, writing and publishing their Sentiments with decency and freedom (Lloyd 1789).”   There is no apparent concern for symbolic forms of speech.  Rather, the idea is that someone may privately write and say what he so wishes, and publish that material if one so chooses.&lt;/p&gt;
&lt;p&gt;The overarching intent of the Free Speech clause, appears to be an intent to forbid the federal government from restricting access to free presses.  The concern is almost exclusively focused on published material, and the fact that a free press enables the people of a nation to challenge the acts of government.  To restrict this right, in the eyes of some members of the congress, and the state ratification committees, was to in effect establish a tyrannical government.  The English Bill of Rights, State Constitutions, and the accounts of the State Ratification Committees all support this.&lt;/p&gt;
&lt;p&gt;The conditional clauses within the state constitutions also point to the fact, that speech was not to be construed to enable a person to act in a way that is harmful to the public welfare.  State laws passed in order to improve the well being of the general public could not be abrogated by individuals claiming a free speech exemption.  In reference to Mr. Phillips’ claims an original intent lens, at best guess &lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;, would not support an individual protection from state public accommodation laws on free speech grounds.&lt;/p&gt;
&lt;h4 id=&#34;establishment-and-free-exercise-clauses&#34; &gt;Establishment and Free Exercise Clauses
&lt;span&gt;
    &lt;a href=&#34;#establishment-and-free-exercise-clauses&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Again, the English heritage of founders of the United States is relevant to the discussion.  The English Bill of Rights reads, “that the commission for erecting the late courts of commissioners of ecclesiastical causes and all other commissions and courts of like nature are illegal and pernicious (1 Will. and Mary. Sess. 2, c. 2).” &lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Also, certain State constitutions prohibit religious tests necessary to hold office, as well as the imposition of any religious belief upon inhabitants.  Georgia’s in particular, “All persons whatever shall have the free exercise of their religion; provided it be not repugnant to the peace and safety of the State; and shall not, unless by consent, support any teacher, or teachers, except those of their own profession…. No clergyman, of any denomination, shall be allowed a seat in the legislature (Watkins and Watkins 1800, 15-16).” Also, important is the state of New York’s 1777 constitution which states, “that the free Exercise and Enjoyment of religious Profession and Worship, without Discrimination or Preference, shall forever hereafter be allowed within this state to all Mankind.” Noticeable is the conditional clause, citing: Provided, that the Liberty and Conscience hereby granted, shall not be so construed, as to excuse Acts of Licentiousness, or justify Practices inconsistent with the Peace or Safety of this State (The State of New York 1789, 13).” A number of other states follow in like fashion. &lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;An intent to separate civil and political life is also apparent at the first congress.  For instance, at first drafting what became the establishment clause read, “The civil rights of none shall be abridged on account of religious belief or worship, nor shall any national religion be established, nor shall the full and equal rights of conscience be in any manner, or any pretext infringed (Lloyd 1789).”  A later draft also read, “Congress shall make no law establishing articles of faith or a mode of worship, or prohibiting the free exercise of religion, or abridging the freedom of speech, or the press, or the right of the people peaceable to assemble, and petition to the Government for the redress of grievances (Lloyd 1789).”&lt;/p&gt;
&lt;p&gt;Together, these provide little evidence into the intention of the legislators present at the first congress.  The first draft, quite different from the final, implies a respect for both the free exercise of religion, and for free exercise of action according to the dictate of conscience.  As a summary of Mr. Samuel Huntington’s concern reads, “he hoped therefore the amendment would be made in such a way as to secure the rights of conscience, and a free exercise of the rights of religion, but not to patronize those who profess no religion at all (Lloyd 1789).” Thus, concern for both religious exercise, as well as non-religious seems to be equally supported by at least Mr. Huntington.  Governor Randolph of Virginia puts this same convention more forwardly in stating that, “a mutual toleration, and a persuasion that no man has the right to impose his opinion on other” is his intent behind the ratification of what became the first amendment (Elliot 1888).&lt;/p&gt;
&lt;p&gt;However, the next draft removes this consideration, and limits the wording to include only protections for the free-exercise of religion.  Freedom of consciousness, whatever that they may mean is dropped.  A series of other drafts may be considered, as may conflicting pamphlets but the pressing reality is that the members of the first congress, as well as the state ratification committees, and the general public at large, all had different concerns.  Who is considered to be authoritative on this matter is dependent upon the values of the individual reader.  Therefore, there cannot be one legislative intent, but instead a diversity of intents that converged about a single piece of legislation.&lt;/p&gt;
&lt;p&gt;If one were to guess, which is the best that can be done on the matter, the intent behind the establishment clause was to protect the individual states from usurpation of powers by the federal government of powers historically held by the states.  The protections for religion, speech, assembly, and redress, grant to the states special protections in order to further weaken the federal government.  There is not a unanimous application of these rights to all individual inhabitants within the United States.    No, instead, a blanket restriction was imposed upon the federal government, in order to allow the states to manage these affairs as they saw fit.  If a justice were to consult this original intention, Mr. Philips’ claims would be superfluous, as the amendment would not be binding on the state of Colorado.&lt;/p&gt;
&lt;h3 id=&#34;precedent&#34; &gt;Precedent
&lt;span&gt;
    &lt;a href=&#34;#precedent&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;analysis-of-case-law&#34; &gt;Analysis of Case Law
&lt;span&gt;
    &lt;a href=&#34;#analysis-of-case-law&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;To test Mr. Phillips’ claim to a freedom of speech, and a free exercise exemption, this section of the paper will analyze the doctrines created by the Supreme Court in regard to Privacy, Establishment, Free Exercise, and the Freedom of Contract.&lt;/p&gt;
&lt;h4 id=&#34;establishment-of-clause&#34; &gt;Establishment of Clause
&lt;span&gt;
    &lt;a href=&#34;#establishment-of-clause&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Lemon v. Kurtzman is the authority which the court recognizes as the standard by which to test laws for Establishment Clause violations.  The “Lemon Test” states three rules.  “First, the statute must have a secular legislative purpose; second, its principal or primary effect must be one that neither advances nor inhibits religion; Finally, the statute must not foster an excessive government entanglement with religion (Lemon v. Kurtzman, 1971) “In order to determine whether the government entanglement with religious is excessive, we must examine the character and purpose of the institutions that benefitted, the nature of the aid the state provides, and the resulting relationship between the government and the religious authority (Lemon v. Kurtzman, 1971).”  The Colorado state law in question, does not in any way violate these provisions.&lt;/p&gt;
&lt;p&gt;For example, it may not be construed to have any other purpose than a secular one.  Secondly, the primary effect does not inhibit nor advance religion.  The primary purpose only protects individuals from discrimination in place of public accommodation.  Third, the law does not entangle the government, federal or state, with religion.  In effect, the government, no matter the degree of separation, is not entangled with any church, mosque, or any other form of religion.&lt;/p&gt;
&lt;h4 id=&#34;free-exercise&#34; &gt;Free Exercise
&lt;span&gt;
    &lt;a href=&#34;#free-exercise&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The Free Exercise claim is not as easily defeated.  A number of cases must be reviewed in order to conclude whether the Colorado law is in violation of this clause (U.S. Const. amend. I cl.1)&lt;/p&gt;
&lt;h5 id=&#34;reynolds-v-united-states-1879&#34; &gt;Reynolds v. United States 1879
&lt;span&gt;
    &lt;a href=&#34;#reynolds-v-united-states-1879&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;The first case under consideration is Reynolds v. United States (1879), in which laws prohibiting bigamy were brought under scrutiny when challenged by members of the Church of Latter Day Saints.  To challenge the conviction, which was considered, as it is at present antithetical to publically accepted morality the Court argued that “laws are made for the government of actions, and while they cannot interfere with mere religious belief and opinions, they may with practices (Reynolds v. United States, 1879)” in order to promote the general welfare of the people.  To permit otherwise “would be to make the professed doctrines of religious belief superior to the law of the land, and in effect to permit every citizen to become a law unto himself (Reynolds v. United States, 1879).”&lt;/p&gt;
&lt;h5 id=&#34;employment-division-v-smith-1990&#34; &gt;Employment Division v. Smith 1990
&lt;span&gt;
    &lt;a href=&#34;#employment-division-v-smith-1990&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;This position is reiterated in Employment Div. v. Smith (1990) in which the court deliberated on the validity of a Seattle State law’s prohibition on providing unemployment benefits to individuals found to have used schedule I substance despite a claim to a religious exemption.  The appellant sought to reverse the verdict of Reynolds.  The Court did not budge.  To force the state to violate its own laws at the behest of an individual claiming religious exemptions for specific practices in effect does put the government behind the promotion of the claimant’s religious beliefs.  In fact, “it is a permissible reading of U.S Const. Amend. I to say that if prohibiting the exercise or religion is not the object of a law, but merely the incidental effect of a generally applicable and otherwise valid provision, the First Amendment has not been offended (Employment Div. v. Smith, 1990).”&lt;/p&gt;
&lt;h5 id=&#34;hobby-lobby-inc-v-burwell-2014&#34; &gt;Hobby Lobby, Inc v. Burwell 2014
&lt;span&gt;
    &lt;a href=&#34;#hobby-lobby-inc-v-burwell-2014&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;The court shifted however in Hobby Lobby, Inc v. Burwell which the Supreme Court violated the spirit of previous decisions in response to Congress’ passage of the Religious Land Use and Institutionalized Persons Act, the RLUIPA. Which is “in an obvious effort to effect a complete separation from First Amendment case law (Hobby Lobby, Inc v. Burwell, 2014).” The Court did not strike the law as they had done City of Boerne v. Flores (1997).  Instead they validated it despite the fact “the powers of the legislature are defined and limited; and that those limits may not be mistaken (City of Boerne v. Flores, 1997).”  Unlike the consensus in Employment Div. v. Smith (1990), that a rule of general applicability may supersede one’s free exercise rights, the court found in favor of the corporate entity Hobby Lobby’s stance that the imposition of fines as punishment for not providing contraceptive coverage to female employees is not the “least restrictive means of furthering” a government interest.&lt;/p&gt;
&lt;h5 id=&#34;free-exercise-mr-so-and-sos-claim&#34; &gt;Free Exercise Mr. So and So&amp;rsquo;s Claim
&lt;span&gt;
    &lt;a href=&#34;#free-exercise-mr-so-and-sos-claim&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;Considering the current claim, is it that the Colorado Law unduly inhibits the free exercise of religious belief?  No, it does not in any way.  By way of Lemon v. Kurtzman (1971), Reynolds v. United States (1879), and Employment Div. v. Smith (1990), the Colorado Public Accommodation law passes the test of general applicability.  However, the only precedent which may challenge its constitutionality is Hobby Lobby, Inc v. Burwell (2014).  Nonetheless, the Colorado Law may be considered the least restrictive means to further the public accommodation protections according to sexual-orientation.  To accomplish the same ends in any way less restrictive would require the law to be struck from the books.&lt;/p&gt;
&lt;h4 id=&#34;privacy&#34; &gt;Privacy
&lt;span&gt;
    &lt;a href=&#34;#privacy&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;The right to marriage, well the right for same-sex couples to marry is a right founded in the doctrine of privacy and supported by the Fourteenth Amendment.  Obergefell v. Hodges (2015) the ruling which enabled same-sex couples to marry is the culmination of a development of a doctrine which proposes that institutions understood to be fundamental to ordered liberty ought not to be excessively regulated by the Congress (Palko v. Connecticut, 1937).   A string of cases in which the Court came to adopt the position that consenting adults of nontraditional relationships ought to receive the same protections under the law as those of traditional relationships rationalize the ruling. &lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h5 id=&#34;griswold-v-connecticut-1965&#34; &gt;Griswold v. Connecticut 1965
&lt;span&gt;
    &lt;a href=&#34;#griswold-v-connecticut-1965&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;In Griswold v. Connecticut (1965) it was found that a consenting couple may receive counseling from a planned parenthood representative with regard to birth control.  The right of that couple to act according to their discretion is fundamental to the institution of marriage.  The court could not find a rational government interest to infringe upon that sacred barrier.&lt;/p&gt;
&lt;h5 id=&#34;loving-v-virginia-1967&#34; &gt;Loving v. Virginia 1967
&lt;span&gt;
    &lt;a href=&#34;#loving-v-virginia-1967&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;Accordingly, the Court ruled in Loving v. Virginia (1967) that the rights afforded to white couples and black couples, could not be excluded from couples of mixed races.  Marriage is a fundamental right.  Therefore, it cannot be awarded only to select classes. Rather it is a right afforded to each individual of the United States.  The Fourteenth Amendment ensures that all people are afforded equal protection under the law.  To violate this principle is to violate the constitution.&lt;/p&gt;
&lt;h5 id=&#34;lawrence-v-texas-2003&#34; &gt;Lawrence v. Texas 2003
&lt;span&gt;
    &lt;a href=&#34;#lawrence-v-texas-2003&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;Lawrence v. Texas (2003) applied this principle to same sex couples.  It was found that sodomy laws in general restrict the ability for male same-sex couples to fully realize intimacy.  The laws unduly affected a single class of individuals without reason except to eliminate a socially unaccepted behavior from the private lives of two consenting adults.  The court could find no basis for the ban apart from undue bias directed at same-sex couples.&lt;/p&gt;
&lt;h5 id=&#34;obergefell-v-hodges-2015&#34; &gt;Obergefell v. Hodges 2015
&lt;span&gt;
    &lt;a href=&#34;#obergefell-v-hodges-2015&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;The ultimate realization of the privacy protections and Fourteenth Amendment jurisprudence is found in Obergefell v. Hodges (2015) The court here found that “the right to marry is a fundamental right inherent in the liberty of the person (Obergefell v. Hodges, 2015).”  To disallow a same sex couples the right to marriage “denies individual dignity and autonomy (Obergefell v. Hodges, 2015).” to a subclass of citizens without rational basis.  In Obergefell v. Hodges (2015) “under the Due Process and Equal Protections Clauses of the Fourteenth Amendment couples of the same-sex may not be deprived” of their right to marry and to share the same privileges of same-sex couples.&lt;/p&gt;
&lt;h5 id=&#34;privacy-and-mr-so-and-sos-claim&#34; &gt;Privacy and Mr. So and So&amp;rsquo;s Claim
&lt;span&gt;
    &lt;a href=&#34;#privacy-and-mr-so-and-sos-claim&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;According then to the Privacy doctrine, and namely Obergefell v. Hodges the right for gay couples to marry is fundamental.  They must then receive the same privileges and protections of all other married couples.  Without even the Colorado Law in place, I would argue that the Privacy Doctrine in of itself protects gay couples from the type of discrimination experienced by Mr. Charlie Craig and Mr. Dave Mullins.  The sanctity of the institution of marriage no matter those whom enter into it is fundamental to the idea of liberty in this country. To violate that sanctity when two gay men marry is to violate the holding of Obergefell and more heinously the dignity of two individuals.&lt;/p&gt;
&lt;h4 id=&#34;freedom-to-contract&#34; &gt;Freedom to Contract
&lt;span&gt;
    &lt;a href=&#34;#freedom-to-contract&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;There may be a case for the individual right to bargain for the terms of one’s contracts free from the regulation of the government, but the court has already spoken on this matter.  “The power… to restrict freedom of contract may be exercised in the public interest (West Coast Hotel Co. v. Parrish, 1937) Also, the authority of the government to regulate products that affect interstate commerce has been affirmed in United States v. Darby (1941). The real question here is whether a state government may regulate services in places of public accommodation?&lt;/p&gt;
&lt;p&gt;The answer is a resounding yes. The Federal government for instance may do so when commerce is affected.  The two most important cases for the purpose of this paper are Katzenbach v. McClung (1964) and Heart of Atlanta Motel, Inc. v. United States (379 U.S. 241, 1964). These cases both rest on the validity of Title II of the Civil Rights Act of 1964 which states “all Persons shall be entitled to the full and equal enjoyment of the goods, services, facilities, privileges, advantages, and accommodations of any place of public accommodation.”  Public accommodation is defined as “any inn, hotel, motel, or other establishment which provides lodging to transient guests.  Any Restaurant, cafeteria, lunchroom, lunch counter, soda fountain, or other facility principally engaged in selling food for consumption on the premises. (42 U.S.C. S 2000a(a), 42 U.S.C. S 2000a(b)).&lt;/p&gt;
&lt;h5 id=&#34;katzenbach-v-mcclung-1964&#34; &gt;Katzenbach v. McClung 1964
&lt;span&gt;
    &lt;a href=&#34;#katzenbach-v-mcclung-1964&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;In Katzenbach v. McClung (1964) the Court recognized “that discrimination in restaurants has a direct and highly restrictive effect upon interstate travel… This results because discriminatory practices prevent Negroes from buying prepared food… except in isolated and unkempt restaurants and under unsatisfactory and often unpleasant conditions (Katzenbach v. McClung, 1964).”  The outcome of which is the treatment of Blacks as second-class citizens not deserving the standards of decency enjoyed by their White peers. As the Congress enjoys “the power to make all laws which shall be necessary and proper for carrying into execution” it’s Commercial and Spending powers, Congress may regulate “those activities intrastate which so affect interstate commerce… to the attainment of a legitimate end (Katzenbach v. McClung, 1964).”&lt;/p&gt;
&lt;h5 id=&#34;heart-of-atlanta-motel-inc-v-united-states-1964&#34; &gt;Heart of Atlanta Motel, Inc, v. United States 1964
&lt;span&gt;
    &lt;a href=&#34;#heart-of-atlanta-motel-inc-v-united-states-1964&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;Heart of Atlanta Motel, Inc. v. United States (1964) reiterates the opinion of Katzenbach v. McClung (1964), but further specifies when the Congress may in fact regulate commercial services.  “The only questions are (1) whether Congress had a rational basis for finding that racial discrimination&amp;hellip; affected commerce, and (2) if it had such a basis, whether the means it selected to eliminate that evil reasonable and appropriate (Heart of Atlanta Motel, Inc. v. United States, 1964).”  In the case of the segregation of hotels the Congress is well within its bounds to manage the way in which proprietors treat their customers, in order to avoid the evil of segregation.  It is not a stretch to apply the same principles to support the right of a state’s legislature to ensure that no discrimination occurs on the basis of sexual-orientation.&lt;/p&gt;
&lt;h5 id=&#34;freedom-to-contract-and-mr-so-and-sos-claim&#34; &gt;Freedom to Contract and Mr. So and So&amp;rsquo;s claim
&lt;span&gt;
    &lt;a href=&#34;#freedom-to-contract-and-mr-so-and-sos-claim&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;In the case of the individual states, their police powers alone allow them to enforce public accommodation laws by way of the 10th amendment.  The barometer in the case of Masterpiece Cake (2018)  is whether the Colorado law protects the welfare, safety, and health of the public at large.  Obviously, a state law which purports to protect the general welfare, and safety of all people can be said to meet this standard.&lt;/p&gt;
&lt;p&gt;(attitudinal-case-study)=&lt;/p&gt;
&lt;h2 id=&#34;attitudinal-model-case-study&#34; &gt;Attitudinal Model Case Study
&lt;span&gt;
    &lt;a href=&#34;#attitudinal-model-case-study&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Write an intro.  Facts, text,&lt;/p&gt;
&lt;h3 id=&#34;methodology&#34; &gt;Methodology
&lt;span&gt;
    &lt;a href=&#34;#methodology&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;To build a model that takes into account the subjective attitudes of the Supreme Court Justices. I use the Washington University Law Database (Spaeth, Epstein, et al. 2017) that takes into account the individual decisions of each justice in order to determine their ideological value across time.   I then test these values against the facts, including attitudinal objects, and attitudinal situations, of Masterpiece Cake LTD. v. Colorado Civil Rights Commission (2018)&lt;/p&gt;
&lt;h4 id=&#34;ideological-score-by-justice&#34; &gt;Ideological Score by Justice
&lt;span&gt;
    &lt;a href=&#34;#ideological-score-by-justice&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;To determine a justice’s ideological score I test their votes across time to determine whether they vote conservatively or liberally.  A simple mean value between one and two is then generated.  The closer to one a justice votes the more conservative.  Alternatively, the closer to two the value, the more liberal.  The results for the individual justices are included in
the chart below.&lt;/p&gt;
&lt;h6 id=&#34;table&#34; &gt;Table
&lt;span&gt;
    &lt;a href=&#34;#table&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Justice&lt;/th&gt;
&lt;th&gt;Mean&lt;/th&gt;
&lt;th&gt;N&lt;/th&gt;
&lt;th&gt;Std. Deviation&lt;/th&gt;
&lt;th&gt;Variance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AMKennedy&lt;/td&gt;
&lt;td&gt;1.42&lt;/td&gt;
&lt;td&gt;2668&lt;/td&gt;
&lt;td&gt;0.493&lt;/td&gt;
&lt;td&gt;0.243&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CThomas&lt;/td&gt;
&lt;td&gt;1.32&lt;/td&gt;
&lt;td&gt;2179&lt;/td&gt;
&lt;td&gt;0.468&lt;/td&gt;
&lt;td&gt;0.219&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBGinsburg&lt;/td&gt;
&lt;td&gt;1.6&lt;/td&gt;
&lt;td&gt;1964&lt;/td&gt;
&lt;td&gt;0.491&lt;/td&gt;
&lt;td&gt;0.241&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SGBreyer&lt;/td&gt;
&lt;td&gt;1.56&lt;/td&gt;
&lt;td&gt;1848&lt;/td&gt;
&lt;td&gt;0.496&lt;/td&gt;
&lt;td&gt;0.246&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JGRoberts&lt;/td&gt;
&lt;td&gt;1.42&lt;/td&gt;
&lt;td&gt;913&lt;/td&gt;
&lt;td&gt;0.493&lt;/td&gt;
&lt;td&gt;0.243&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SAAlito&lt;/td&gt;
&lt;td&gt;1.36&lt;/td&gt;
&lt;td&gt;874&lt;/td&gt;
&lt;td&gt;0.481&lt;/td&gt;
&lt;td&gt;0.232&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSotomayor&lt;/td&gt;
&lt;td&gt;1.62&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;0.487&lt;/td&gt;
&lt;td&gt;0.237&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EKagan&lt;/td&gt;
&lt;td&gt;1.59&lt;/td&gt;
&lt;td&gt;486&lt;/td&gt;
&lt;td&gt;0.492&lt;/td&gt;
&lt;td&gt;0.242&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NMGorsuch&lt;/td&gt;
&lt;td&gt;1.18&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;0.393&lt;/td&gt;
&lt;td&gt;0.154&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.47&lt;/td&gt;
&lt;td&gt;11549&lt;/td&gt;
&lt;td&gt;0.499&lt;/td&gt;
&lt;td&gt;0.249&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;ideological-score-by-justice-first-ammendment&#34; &gt;Ideological Score by Justice First Ammendment
&lt;span&gt;
    &lt;a href=&#34;#ideological-score-by-justice-first-ammendment&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Similarly, I derive ideological values according to voting patterns relating to first amendment cases.  The results are printed in the following chart.&lt;/p&gt;
&lt;h5 id=&#34;table-1&#34; &gt;Table
&lt;span&gt;
    &lt;a href=&#34;#table-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Justice&lt;/th&gt;
&lt;th&gt;issue area of case (coarse)&lt;/th&gt;
&lt;th&gt;Mean&lt;/th&gt;
&lt;th&gt;N&lt;/th&gt;
&lt;th&gt;Std. Deviation&lt;/th&gt;
&lt;th&gt;Variance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AMKennedy&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.47&lt;/td&gt;
&lt;td&gt;167&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CThomas&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.33&lt;/td&gt;
&lt;td&gt;127&lt;/td&gt;
&lt;td&gt;0.472&lt;/td&gt;
&lt;td&gt;0.223&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBGinsburg&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.68&lt;/td&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;td&gt;0.469&lt;/td&gt;
&lt;td&gt;0.22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SGBreyer&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.55&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JGRoberts&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.51&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;0.505&lt;/td&gt;
&lt;td&gt;0.255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SAAlito&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.42&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;0.499&lt;/td&gt;
&lt;td&gt;0.249&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSotomayor&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.67&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;0.479&lt;/td&gt;
&lt;td&gt;0.229&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EKagan&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.67&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;0.48&lt;/td&gt;
&lt;td&gt;0.231&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NMGorsuch&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.51&lt;/td&gt;
&lt;td&gt;665&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;ideological-score-by-justice-by-individual-issue-area&#34; &gt;Ideological Score by Justice by Individual Issue Area
&lt;span&gt;
    &lt;a href=&#34;#ideological-score-by-justice-by-individual-issue-area&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Finally, ideological scores are derived by issue area.  For the purpose of this discussion this is equivalent to an evaluation of the individual attitude-situations as they relate to the facts of the case.  The results are below:&lt;/p&gt;
&lt;h5 id=&#34;table-2&#34; &gt;Table
&lt;span&gt;
    &lt;a href=&#34;#table-2&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Justice&lt;/th&gt;
&lt;th&gt;issue area of case (coarse)&lt;/th&gt;
&lt;th&gt;Issue Area Of Case (Fine)&lt;/th&gt;
&lt;th&gt;Mean&lt;/th&gt;
&lt;th&gt;N&lt;/th&gt;
&lt;th&gt;Std. Deviation&lt;/th&gt;
&lt;th&gt;Variance&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AMKennedy&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.71&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;0.469&lt;/td&gt;
&lt;td&gt;0.22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.23&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;0.439&lt;/td&gt;
&lt;td&gt;0.192&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.48&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;0.509&lt;/td&gt;
&lt;td&gt;0.259&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.71&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;0.469&lt;/td&gt;
&lt;td&gt;0.22&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.23&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;0.439&lt;/td&gt;
&lt;td&gt;0.192&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.48&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;0.509&lt;/td&gt;
&lt;td&gt;0.259&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CThomas&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.91&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;0.302&lt;/td&gt;
&lt;td&gt;0.091&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;0.316&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.52&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;0.512&lt;/td&gt;
&lt;td&gt;0.262&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.91&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;0.302&lt;/td&gt;
&lt;td&gt;0.091&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;0.316&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.52&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;0.512&lt;/td&gt;
&lt;td&gt;0.262&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBGinsburg&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.56&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0.527&lt;/td&gt;
&lt;td&gt;0.278&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;0.428&lt;/td&gt;
&lt;td&gt;0.183&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.56&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0.527&lt;/td&gt;
&lt;td&gt;0.278&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;0.428&lt;/td&gt;
&lt;td&gt;0.183&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SGBreyer&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0.441&lt;/td&gt;
&lt;td&gt;0.194&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.67&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.72&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;0.461&lt;/td&gt;
&lt;td&gt;0.212&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0.441&lt;/td&gt;
&lt;td&gt;0.194&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.67&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.72&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;0.461&lt;/td&gt;
&lt;td&gt;0.212&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JGRoberts&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0.441&lt;/td&gt;
&lt;td&gt;0.194&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0.441&lt;/td&gt;
&lt;td&gt;0.194&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SAAlito&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.75&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0.463&lt;/td&gt;
&lt;td&gt;0.214&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.75&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0.463&lt;/td&gt;
&lt;td&gt;0.214&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSotomayor&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0.548&lt;/td&gt;
&lt;td&gt;0.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.63&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0.518&lt;/td&gt;
&lt;td&gt;0.268&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0.548&lt;/td&gt;
&lt;td&gt;0.3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.63&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0.518&lt;/td&gt;
&lt;td&gt;0.268&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EKagan&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.8&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0.447&lt;/td&gt;
&lt;td&gt;0.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.83&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;0.408&lt;/td&gt;
&lt;td&gt;0.167&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NMGorsuch&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;td&gt;0.418&lt;/td&gt;
&lt;td&gt;0.174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.46&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;0.504&lt;/td&gt;
&lt;td&gt;0.254&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.65&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;0.48&lt;/td&gt;
&lt;td&gt;0.231&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;td&gt;0.418&lt;/td&gt;
&lt;td&gt;0.174&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.46&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;0.504&lt;/td&gt;
&lt;td&gt;0.254&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.65&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;0.48&lt;/td&gt;
&lt;td&gt;0.231&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;expected-results&#34; &gt;Expected Results
&lt;span&gt;
    &lt;a href=&#34;#expected-results&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;In an attempt to replicate the results of Masterpiece Cakeshop Ltd. v. Chicago Civil Rights Commission (2018) I will simply consult the three ideological values above.  If a justice scores below a 1.5 in any area, then they will be expected to vote conservatively.  Conversely if a score above 1.5 is observed the justice is expected to vote liberally.&lt;/p&gt;
&lt;p&gt;In context, A liberal vote will found in favor of the Mr. Charlie Craig and his partner, Mr. Dave Mullins.  The following variables describe liberal voting preferences as they relate to the case.  Pro-civil liberties or civil rights, pro-neutrality in establishment clause cases, pro-underdog, anti-owner, anti-business, pro-government, pro-exercise of judicial action, and pro-judicial activism. A conservative vote is in favor of Mr. Philips, the Colorado baker. Conservatism in context is described as opposite the above liberal values.&lt;/p&gt;
&lt;h4 id=&#34;justice-vote-according-to-general-ideological-score&#34; &gt;Justice Vote According to General Ideological Score
&lt;span&gt;
    &lt;a href=&#34;#justice-vote-according-to-general-ideological-score&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h5 id=&#34;table-3&#34; &gt;Table
&lt;span&gt;
    &lt;a href=&#34;#table-3&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Justice&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Vote&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AMKennedy&lt;/td&gt;
&lt;td&gt;1.42&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CThomas&lt;/td&gt;
&lt;td&gt;1.32&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBGinsburg&lt;/td&gt;
&lt;td&gt;1.6&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SGBreyer&lt;/td&gt;
&lt;td&gt;1.56&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JGRoberts&lt;/td&gt;
&lt;td&gt;1.42&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SAAlito&lt;/td&gt;
&lt;td&gt;1.36&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSotomayor&lt;/td&gt;
&lt;td&gt;1.62&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EKagan&lt;/td&gt;
&lt;td&gt;1.59&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NMGorsuch&lt;/td&gt;
&lt;td&gt;1.18&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.47&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;justice-votes-by-first-amendment&#34; &gt;Justice Votes by First Amendment
&lt;span&gt;
    &lt;a href=&#34;#justice-votes-by-first-amendment&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h5 id=&#34;table-4&#34; &gt;Table
&lt;span&gt;
    &lt;a href=&#34;#table-4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Justice&lt;/th&gt;
&lt;th&gt;issue area of case (coarse)&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Vote&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AMKennedy&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.47&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CThomas&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.33&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RBGinsburg&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.68&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SGBreyer&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.55&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JGRoberts&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.51&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SAAlito&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.42&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSotomayor&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.67&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EKagan&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.67&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NMGorsuch&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;1.51&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.51&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;justice-votes-by-issue-area&#34; &gt;Justice Votes by Issue Area
&lt;span&gt;
    &lt;a href=&#34;#justice-votes-by-issue-area&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h5 id=&#34;table-5&#34; &gt;Table
&lt;span&gt;
    &lt;a href=&#34;#table-5&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Justice Identification Number&lt;/th&gt;
&lt;th&gt;Issue Area Of Case (Coarse)&lt;/th&gt;
&lt;th&gt;Issue Area Of Case (Fine)&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Vote&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Amkennedy&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.71&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.23&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.48&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cthomas&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.91&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.52&lt;/td&gt;
&lt;td&gt;Lib&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rbginsburg&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.56&lt;/td&gt;
&lt;td&gt;Lib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Lib&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;Lib&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sgbreyer&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;Lib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.67&lt;/td&gt;
&lt;td&gt;Lib&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.72&lt;/td&gt;
&lt;td&gt;Lib&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jgroberts&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Lib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Saalito&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.75&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ssotomayor&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;td&gt;Lib/Con&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.63&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ekagan&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.8&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.83&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nmgorsuch&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;First Amendment&lt;/td&gt;
&lt;td&gt;Free Exercise Of Religion&lt;/td&gt;
&lt;td&gt;1.78&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Establishment Of Religion&lt;/td&gt;
&lt;td&gt;1.46&lt;/td&gt;
&lt;td&gt;Cons.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;1.65&lt;/td&gt;
&lt;td&gt;Lib.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;prediction-summary&#34; &gt;Prediction Summary
&lt;span&gt;
    &lt;a href=&#34;#prediction-summary&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The general ideological value scores predict a 5-4 split along the usual lines (figure 5 include a ref).  The conservative majority coalition consists of Justices, Kennedy, Thomas, Roberts, Alito, and Gorsuch.  The liberal minority is of Justices Ginsberg, Breyer, Sotomayor, and Kagan.&lt;/p&gt;
&lt;p&gt;The ideological scores by the first amendment issue area, predicts a very different outcome.  For instance, a 7-2 liberal majority is expected.  Kennedy, is expected to vote with the conservative coalition, along with Gorsuch.  The Liberal majority consists of, Thomas, Ginsberg, Breyer, Roberts, Alito, Sotomayor, and Kagan.&lt;/p&gt;
&lt;p&gt;Testing again for individual issue areas, the results seem spurious.  When controlling for just the establishment clause, there is a 5-4 majority conservative coalition comprised of Justices Kennedy, Thomas, Roberts, Alito and Gorsuch.  The minority coalition consists of Justices, Ginsberg, Breyer, Sotomayor, Kagan.  However, when controlling for Free Exercise, a 9-0 liberal majority is the expected outcome.&lt;/p&gt;
&lt;h2 id=&#34;findings&#34; &gt;Findings
&lt;span&gt;
    &lt;a href=&#34;#findings&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;actual-results&#34; &gt;Actual Results
&lt;span&gt;
    &lt;a href=&#34;#actual-results&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The actual results of Masterpiece Cakeshop, Ltd, v. Chicago Civil Rights Commission (2018) yield a 7-2 conservative majority in favor of Mr. Phillips consisting of Justice Roberts, Justice Kennedy, Justice Thomas, Justice Breyer, Justice Alito, Justice Kagan, and Justice Gorsuch.  The liberal minority consist of Justice Ginsberg and Justice Sotomayor.  Justice Kennedy delivered the opinion of the Court.&lt;/p&gt;
&lt;p&gt;The set of ideological values that best predict the actual outcome of the case is the general ideological score.  A 5-4 conservative majority in this case was expected with Justices Kennedy, Thomas, Roberts, Alito, and Gorsuch in the majority.  Justices Ginsberg, Breyer, Sotomayor, and Kagan were in the expected minority.&lt;/p&gt;
&lt;h3 id=&#34;attitudinal-model-evaluation&#34; &gt;Attitudinal Model Evaluation
&lt;span&gt;
    &lt;a href=&#34;#attitudinal-model-evaluation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The discrepancy between the expected results and the actual results is difficult to explain.  Restricting the analysis at this point to only the attitudinal model the explanation must be that the ideologies of the justices acted upon the facts of the case, the situations in an unexpected way.  This could be caused by two factors. The first being that the variables defining conservatism and liberalism are inaccurate.  The other being that Justices, primarily the liberals which voted conservatively voted against the dictate of their ideological preferences.&lt;/p&gt;
&lt;p&gt;As stated above the attributes defining liberalism are pro-civil liberties or civil rights, pro-underdog, anti-owner, anti-business, pro-government, pro-exercise of judicial action, and pro-judicial activism.  Justice Breyer and Justice Kagan both tend to vote towards this direction.  In Masterpiece Cakeshop Ltd, v. Colorado Civil Rights Commission (2018)  however, they did not.  To run through the facts of the case quickly, Mr. Phillips is the proprietor of a small business that discriminates against a quasi-suspect class of citizens (non-heterosexual couples) in violation of Colorado state civil rights law.  When brought to suit, a civil rights administration of the state of Colorado, which is de-facto a quasi-judicial bureaucracy, oversaw the case and declared Mr. Phillip in violation of generally applicable and religiously neutral Colorado public accommodation laws.  Or in other words, every factor leading to a liberal vote is apparent in this case.  So then, Justices’ Breyer and Kagan moving in the conservative direction is remarkable.&lt;/p&gt;
&lt;p&gt;Or is it?   While reading through the Court’s opinion, the Court does not greatly address Mr. Phillips’ claim.  In fact, Justice Kennedy completely side steps the freedom of speech and religious freedom haymaker.  Rather, the object of consideration turns from Mr. Phillip’s to the actions of the state’s Civil Rights Commission.  “When the Colorado Civil Rights Commission considered this case, it did not do so with the religious neutrality that the Constitution requires.” (Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission 2018) Considering this change in object, is it that the pertinent facts of the case change as well?&lt;/p&gt;
&lt;p&gt;Pro-civil liberties or civil rights, pro-underdog, anti-owner, anti-business, pro-government, pro-exercise of judicial action, and pro-judicial activism all still apply.  With the additional imposition by the Commission of “comprehensive staff training” and “quarterly compliance reports” it could also be argued that the pro-affirmative action factor may be active in this case. However, the startling material fact that distinguishes this case is the abject hostility the Civil Rights Commission demonstrated towards Mr. Philips’ “sincerely held religious beliefs (Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission 2018).”  Therefore, the pro-neutrality of the establishment clause is grossly violated.  To such a degree that the “clear and impermissible hostility towards [the] sincere religious beliefs (Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission 2018)” forced two liberal Justices to join the conservative coalition.&lt;/p&gt;
&lt;p&gt;In Justice Kagan’s own words,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“[I]t is a general rule that [religious and philosophical] objections do not allow business owners and other actors in the economy and in society to deny protected persons equal access to goods and services under a neutral and generally applicable public accommodations law.” Ante, at 9. But in upholding that principle, state actors cannot show hostility to religious views; rather, they must give those views “neutral and respectful consideration.” Ante, at 12. I join the Court’s opinion in full because I believe the Colorado Civil Rights Commission did not satisfy that obligation. (Masterpiece Cakeshop Ltd. v. Colorado Civil Rights Commission 2018)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is apparent then is that Justice Kagan recognizes that in order to apply the establishment clause neutrally the federal and state governments must not act with hostility towards individuals with sincerely held religious beliefs.  Laws of general applicability in order to be constitutional must not unduly harm religious individuals.  Thus, Justice Breyer, and Justice Kagan both agree in full with the opinion of the Court.&lt;/p&gt;
&lt;h3 id=&#34;legal-model-evalution&#34; &gt;Legal Model Evalution
&lt;span&gt;
    &lt;a href=&#34;#legal-model-evalution&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;More startling then the actual outcome of the case is the fact that the Justices largely adhered to precedent, or at least to the judicially created rule that valid law applied neutrally in respect to the establishment clause may be considered good law.  When considering the facts of the case to previous first amendment questions the results in light of the Civil Rights Commission’s hostility towards Mr. Phillips are not in any way remarkable.&lt;/p&gt;
&lt;p&gt;The three-pronged Lemon v. Kurtzman (1971) test exclusively could yield the same results.  First the Colorado law does have a secular purpose.  On the other hand, due to the way in which the Civil Rights Commission applied the law, its effect “inhibits religion”.  Because of that inhibition, the Colorado state government does become unnecessarily entangled in religion.  Passing through the matrix, the actions of the state are obviously unconstitutional.&lt;/p&gt;
&lt;p&gt;Consulting also Employment Div. v. Smith (1990) the court in Masterpiece Cakeshop Ltd, v. Colorado Civil Rights Commission (2018) stuck to their statement that “it is a permissible reading of U.S Const. Amend. I to say that if prohibiting the exercise or religion is not the object of a law, but merely the incidental effect of a generally applicable and otherwise valid provision, the First Amendment has not been offended (Employment Div. v. Smith, 1990).”  Therefore, a law of general applicability, applied neutrally does not warrant individual exemptions.  A point driven home by Justice Kennedy in the majority opinion, and also by Justice Kagan in her concurrence.&lt;/p&gt;
&lt;p&gt;Also echoed is the basic reasoning of Obergefell v. Hodges (2015) that “under the Due Process and Equal Protections Clauses of the Fourteenth Amendment couples of the same-sex may not be deprived” of their right to marry and to share the same privileges of same-sex couples.&lt;/p&gt;
&lt;p&gt;The cynical critique, however of the Court’s adherence to precedent is the fact that to a large degree precedent does not conflict with the ideological preferences of the members of the Court.   Many of the cases cited by Justice Kennedy he either authored or was member to the majority.  To those that he was not, the opinions may be linked to ideological predecessors.&lt;/p&gt;
&lt;p&gt;Justice Kagan and Justice Breyer most likely voted “conservatively” due to the fact that the outcome of the case supports well established liberal precedent.  Namely in support of the neutrality of the establishment clause.  The opinion may have also persuaded their vote.  In it Justice Kennedy supports the validity of public accommodation laws protecting the civil rights of same-sex couples and people of other sexual orientations.   In the words of the Court, “It is unexceptional that Colorado law can protect gay persons, just as it can protect other classes of individuals, in acquiring whatever products and services they choose on the same terms and conditions as are offered to other members of the public (Masterpiece Cakeshop v. Colorado Civil Rights Commission, 2018)”.  It is my hypothesis that due the fact that this provision, which supports the basis of the Colorado Public Accommodation law, and the opinion in general supports a neutral application of the Establishment Clause, two liberal Justices voted in the conservative majority.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Include a reference!&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Include a reference to the definition.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Include reference to constitutional ammendment and clause&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This sentence doesn&amp;rsquo;t really mean anything.  Expand upon it.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;reference his claim&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Georgia Laws, p 16; Massachusetts Perpetual laws, p. 7; New Hampshire Laws, pp. 26, 27; North Carolina Laws, p. 275.&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;An argument could be made that language is inherently symbolic speech, but references to contemporary works must be support the argument.   The intent behind the amendment does not seem to apply to the public exhibition of painting and sculpture.&amp;#160;&lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Again, it is impossible to actually determine original intent.&amp;#160;&lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;This clause importantly was written in response to the Catholic persecution of English Protestants under the reign of King James.  Under William and Mary, following the Glorious Revolution, the English Bill of Rights limited the discretion of the monarch, and secured the prevalence of the Parliament.&amp;#160;&lt;a href=&#34;#fnref:9&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:10&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;North Carolina Laws, p. 280; Massachusetts Perpetual Laws, pp. 5-6, New Hampshire Laws, p. 23;  South Carolina Laws, App., p. 41; Virginia Religious Freedom Act, pp. 7.&amp;#160;&lt;a href=&#34;#fnref:10&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:11&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Traditional is to be understood as a heterosexual relationship of members of the same race.  Nontraditional is to be anything that differs from that idea.&amp;#160;&lt;a href=&#34;#fnref:11&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>
